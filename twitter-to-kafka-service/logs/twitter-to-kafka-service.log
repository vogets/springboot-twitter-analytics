2021-03-26 00:12:56 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 46723 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 00:12:56 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 00:12:57 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 00:12:57 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:12:57 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:12:57 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616697777806
2021-03-26 00:12:58 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 00:12:58 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 2.97 seconds (JVM running for 3.953)
2021-03-26 00:12:58 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 00:12:58 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 Kafka Topics,attempt 0
2021-03-26 00:12:58 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading Kafka Topic [twitter-topic],attempt 0
2021-03-26 00:13:12 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-03-26 00:13:12 [main] ERROR o.s.boot.SpringApplication - Application run failed
java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:809)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:790)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:333)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1313)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1302)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.main(TwittertoKafkaApplication.java:33)
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:125)
	at com.twitteranalytics.transportservice.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:28)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.run(TwittertoKafkaApplication.java:40)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:806)
	... 5 common frames omitted
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkMaxRetry(KafkaAdminClient.java:155)
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:119)
	... 8 common frames omitted
2021-03-26 00:13:12 [main] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 00:14:54 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 46895 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 00:14:54 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 00:14:55 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 00:14:55 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:14:55 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:14:55 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616697895178
2021-03-26 00:14:55 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 00:14:55 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 1.718 seconds (JVM running for 2.654)
2021-03-26 00:14:55 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 00:14:55 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 Kafka Topics,attempt 0
2021-03-26 00:14:55 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading Kafka Topic [twitter-topic],attempt 0
2021-03-26 00:15:58 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-03-26 00:15:58 [main] ERROR o.s.boot.SpringApplication - Application run failed
java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:809)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:790)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:333)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1313)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1302)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.main(TwittertoKafkaApplication.java:33)
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:125)
	at com.twitteranalytics.transportservice.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:28)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.run(TwittertoKafkaApplication.java:40)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:806)
	... 5 common frames omitted
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkMaxRetry(KafkaAdminClient.java:155)
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:119)
	... 8 common frames omitted
2021-03-26 00:15:58 [main] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 00:16:49 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 47241 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 00:16:49 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 00:16:50 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 00:16:50 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:16:50 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:16:50 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616698010921
2021-03-26 00:16:51 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 00:16:51 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 2.551 seconds (JVM running for 3.646)
2021-03-26 00:16:51 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 00:16:51 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 Kafka Topics,attempt 0
2021-03-26 00:16:51 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading Kafka Topic [twitter-topic],attempt 0
2021-03-26 00:17:54 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-03-26 00:17:54 [main] ERROR o.s.boot.SpringApplication - Application run failed
java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:809)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:790)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:333)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1313)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1302)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.main(TwittertoKafkaApplication.java:33)
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:126)
	at com.twitteranalytics.transportservice.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:28)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.run(TwittertoKafkaApplication.java:40)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:806)
	... 5 common frames omitted
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkMaxRetry(KafkaAdminClient.java:156)
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:119)
	... 8 common frames omitted
2021-03-26 00:17:54 [main] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 00:20:12 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 49147 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 00:20:12 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 00:20:13 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 00:20:13 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:20:13 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:20:13 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616698213661
2021-03-26 00:20:14 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 00:20:14 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 1.865 seconds (JVM running for 2.933)
2021-03-26 00:20:14 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 00:20:14 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 Kafka Topics,attempt 0
2021-03-26 00:20:14 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading Kafka Topic [twitter-topic],attempt 0
2021-03-26 00:20:14 [reactor-http-epoll-3] WARN  r.n.http.client.HttpClientConnect - [id:888d524b-1, L:/127.0.0.1:52584 ! R:localhost/127.0.0.1:8081] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2021-03-26 00:20:14 [main] INFO  c.t.t.i.impl.KafkaStreamInitializer - Topics with names twitter-topic is ready for operations
2021-03-26 00:20:14 [main] INFO  c.t.t.runner.impl.StreamRunnerImpl - Started filtering twitter Stream for keywords [Java, MicroServices, Spring, Kafka, ElasticSearch]
2021-03-26 00:20:14 [Twitter Stream consumer /  [1][initializing]] INFO  twitter4j.TwitterStreamImpl - Establishing connection.
2021-03-26 00:20:16 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Connection established.
2021-03-26 00:20:16 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Receiving status stream.
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @kafka corre aqui rapidão , sending to Kafka topic twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1066446494889316352, "id": 1375157788947714053, "text": "@kafka corre aqui rapidão", "createdAt": 1616698140000} to the topic = twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  o.a.k.c.producer.ProducerConfig - ProducerConfig values: 
	acks = -1
	batch.size = 1638400
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	internal.auto.downgrade.txn.commit = true
	key.serializer = class org.apache.kafka.common.serialization.LongSerializer
	linger.ms = 5
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 60000
	retries = 5
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer

2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  i.c.k.s.KafkaAvroSerializerConfig - KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	proxy.port = -1
	schema.reflection = false
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	proxy.host = 
	use.latest.version = false
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy

2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616698216130
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node -1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Bootstrap broker localhost:19092 (id: -1 rack: null) disconnected
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node -1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Bootstrap broker localhost:19092 (id: -1 rack: null) disconnected
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] INFO  org.apache.kafka.clients.Metadata - [Producer clientId=producer-1] Cluster ID: A9l3oE2cQYefaisBh4VQsQ
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text ICYMI: Last Friday we announced that our fourth Back to Business Virtual Event: Spring Edition will be taking place in just ONE month! 

Curious to know more about what to expect at this virtual event and how to attend? Click the link here: https://t.co/7e4zQgsjQd https://t.co/pALcLyNW12 , sending to Kafka topic twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 108981407, "id": 1375157789388050440, "text": "ICYMI: Last Friday we announced that our fourth Back to Business Virtual Event: Spring Edition will be taking place in just ONE month! \n\nCurious to know more about what to expect at this virtual event and how to attend? Click the link here: https://t.co/7e4zQgsjQd https://t.co/pALcLyNW12", "createdAt": 1616698140000} to the topic = twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Everyone going on spring break expect for USC like I want a break 😩 , sending to Kafka topic twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1161707528, "id": 1375157790302334976, "text": "Everyone going on spring break expect for USC like I want a break 😩", "createdAt": 1616698141000} to the topic = twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @titsay: spring has arrived 
- 
gouache on watercolor paper https://t.co/Qvs4eun1JL , sending to Kafka topic twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 254924936, "id": 1375157790465949696, "text": "RT @titsay: spring has arrived \n- \ngouache on watercolor paper https://t.co/Qvs4eun1JL", "createdAt": 1616698141000} to the topic = twitter-topic
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Idolomantises: Was in a spring fashion mood https://t.co/WatTU8aAM6 , sending to Kafka topic twitter-topic
2021-03-26 00:20:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 888257656795693058, "id": 1375157792626126851, "text": "RT @Idolomantises: Was in a spring fashion mood https://t.co/WatTU8aAM6", "createdAt": 1616698141000} to the topic = twitter-topic
2021-03-26 00:20:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @GWmag it is always friend.(humble plant is rich in virtuous benefits. To some it’s a pernicious weed and yet this, pretty, early spring flowering plant is a vital food source for pollinators.https://t.co/oqKyjqc3Xh) https://t.co/CzEU1bELvi , sending to Kafka topic twitter-topic
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1226487245709987840, "id": 1375157793276182531, "text": "@GWmag it is always friend.(humble plant is rich in virtuous benefits. To some it\u2019s a pernicious weed and yet this, pretty, early spring flowering plant is a vital food source for pollinators.https://t.co/oqKyjqc3Xh) https://t.co/CzEU1bELvi", "createdAt": 1616698141000} to the topic = twitter-topic
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text I’m really fighting the urge to have a “treat myself” day because it’s usually detrimental to my bank account. But also...

✨Spring wardrobe✨ , sending to Kafka topic twitter-topic
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1135450957, "id": 1375157795155152898, "text": "I\u2019m really fighting the urge to have a \u201Ctreat myself\u201D day because it\u2019s usually detrimental to my bank account. But also...\n\n✨Spring wardrobe✨", "createdAt": 1616698142000} to the topic = twitter-topic
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Calxiyn: Yes, this is EXACTLY what we were thinking! I just didn't know if I wanted Jaune to fall & interact with Pyrrha. 

Also:

Ruby… , sending to Kafka topic twitter-topic
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1101707578701164544, "id": 1375157795289464834, "text": "RT @Calxiyn: Yes, this is EXACTLY what we were thinking! I just didn't know if I wanted Jaune to fall & interact with Pyrrha. \n\nAlso:\n\nRuby\u2026", "createdAt": 1616698142000} to the topic = twitter-topic
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @IvyKungu: forget the spring solstice, the day this video pops on your tl marks the true start of spring , sending to Kafka topic twitter-topic
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3304384626, "id": 1375157795536912388, "text": "RT @IvyKungu: forget the spring solstice, the day this video pops on your tl marks the true start of spring", "createdAt": 1616698142000} to the topic = twitter-topic
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨

Winner receives Free Driver Fitting at Club Champion, and...

A… , sending to Kafka topic twitter-topic
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 14774076, "id": 1375157796442943491, "text": "RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨\n\nWinner receives Free Driver Fitting at Club Champion, and...\n\nA\u2026", "createdAt": 1616698142000} to the topic = twitter-topic
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @DeusExHub: If you haven't yet played the #DeusEx series. The GOG Spring Sale is a good chance for you to do so:

🌸 GOG Spring Sale (end… , sending to Kafka topic twitter-topic
2021-03-26 00:20:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 925491550376771584, "id": 1375157797264891906, "text": "RT @DeusExHub: If you haven't yet played the #DeusEx series. The GOG Spring Sale is a good chance for you to do so:\n\n🌸 GOG Spring Sale (end\u2026", "createdAt": 1616698142000} to the topic = twitter-topic
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @cmhodges86 The first day I moved in to my house I found out my box spring wouldn't fit upstairs. That's when I got my first taste of how expensive box springs can be when you're not buying a mattress. I feel you! , sending to Kafka topic twitter-topic
2021-03-26 00:20:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 20076257, "id": 1375157800163291139, "text": "@cmhodges86 The first day I moved in to my house I found out my box spring wouldn't fit upstairs. That's when I got my first taste of how expensive box springs can be when you're not buying a mattress. I feel you!", "createdAt": 1616698143000} to the topic = twitter-topic
2021-03-26 00:20:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @JacobWolf: From @BloopGG: All members of @FNATIC's League of Legends team have tested negative for COVID-19 and will compete in studio… , sending to Kafka topic twitter-topic
2021-03-26 00:20:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1187030828498509824, "id": 1375157800532275202, "text": "RT @JacobWolf: From @BloopGG: All members of @FNATIC's League of Legends team have tested negative for COVID-19 and will compete in studio\u2026", "createdAt": 1616698143000} to the topic = twitter-topic
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @vice1959: Anomalous cold weather and deep late March snow engulf strange parts of the globe https://t.co/UChdy0mxhL via @Strange Sounds , sending to Kafka topic twitter-topic
2021-03-26 00:20:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 212866397, "id": 1375157800523927553, "text": "RT @vice1959: Anomalous cold weather and deep late March snow engulf strange parts of the globe https://t.co/UChdy0mxhL via @Strange Sounds", "createdAt": 1616698143000} to the topic = twitter-topic
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Viola Tricolor.
.
#viola #violatricolor #violatricolorhortensis #gardenpansy #pansy #spring #flower .
.
https://t.co/2qqFKmEZWx https://t.co/QaWsYCDYvp , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 226719153, "id": 1375157802067488771, "text": "Viola Tricolor.\n.\n#viola #violatricolor #violatricolorhortensis #gardenpansy #pansy #spring #flower .\n.\nhttps://t.co/2qqFKmEZWx https://t.co/QaWsYCDYvp", "createdAt": 1616698143000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring 2021 Update! - https://t.co/Q18TX0IiQE https://t.co/n7myIuZfnx , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 169211913, "id": 1375157800981123073, "text": "Spring 2021 Update! - https://t.co/Q18TX0IiQE https://t.co/n7myIuZfnx", "createdAt": 1616698143000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @FANGORIA: Days are getting longer and Spring and Summer are right around the corner! Time to break out those daylight horrors. What is… , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2882220809, "id": 1375157802994401284, "text": "RT @FANGORIA: Days are getting longer and Spring and Summer are right around the corner! Time to break out those daylight horrors. What is\u2026", "createdAt": 1616698144000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MPCSTennis: This multi-spring-sport senior athlete will play a singles match vs. Fellowship after being celebrated on Senior Day. https… , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 135538284, "id": 1375157803900268550, "text": "RT @MPCSTennis: This multi-spring-sport senior athlete will play a singles match vs. Fellowship after being celebrated on Senior Day. https\u2026", "createdAt": 1616698144000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MilesMichelle5: We had some extra “spring” in our step today! Hopping one more and one less than a given number on a number line today!… , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 546111686, "id": 1375157804345008130, "text": "RT @MilesMichelle5: We had some extra \u201Cspring\u201D in our step today! Hopping one more and one less than a given number on a number line today!\u2026", "createdAt": 1616698144000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MaykuBear: Spring has come and Baloo knows it 🐻🍑💜 https://t.co/kR0Ro6iQhz , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1081739693664825344, "id": 1375157804529487872, "text": "RT @MaykuBear: Spring has come and Baloo knows it 🐻🍑💜 https://t.co/kR0Ro6iQhz", "createdAt": 1616698144000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Ya me acordé que más quería poner, así que continúo hilo , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1292522560798838786, "id": 1375157805288714247, "text": "Ya me acordé que más quería poner, así que continúo hilo", "createdAt": 1616698144000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @PynchonInPublic I'm heavily invested in Triad PLC because I like the company (I used to work for them as a contractor). Its a pure coincidence that they are doing c# blockchain. I was a Java JavaScript developer. , sending to Kafka topic twitter-topic
2021-03-26 00:20:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2783814289, "id": 1375157805204791298, "text": "@PynchonInPublic I'm heavily invested in Triad PLC because I like the company (I used to work for them as a contractor). Its a pure coincidence that they are doing c# blockchain. I was a Java JavaScript developer.", "createdAt": 1616698144000} to the topic = twitter-topic
2021-03-26 00:20:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text #AUDEPART #MEN SPRING/SUMMER '21

L'Europe is a squared shoulder bag that is the perfect companion for your everyday needs. The iconic all-over monogram adorns the outside, giving this slim, flexible and functional bag a unique and modern feel. It can be… https://t.co/Xj2yTqsr6X https://t.co/4IOLxx8xk5 , sending to Kafka topic twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 362625801, "id": 1375157805146116098, "text": "#AUDEPART #MEN SPRING/SUMMER '21\n\nL'Europe is a squared shoulder bag that is the perfect companion for your everyday needs. The iconic all-over monogram adorns the outside, giving this slim, flexible and functional bag a unique and modern feel. It can be\u2026 https://t.co/Xj2yTqsr6X https://t.co/4IOLxx8xk5", "createdAt": 1616698144000} to the topic = twitter-topic
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text I’m so proud of our @UAPB_VB student-athletes @ziggyzyy and @hqgomez14!! They have worked so hard and that hard work is paying off!! Don’t sleep on the our lady Golden Lions in Birmingham! #UAPBLionsAreComing🦁🏐 , sending to Kafka topic twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 32100539, "id": 1375157808610607111, "text": "I\u2019m so proud of our @UAPB_VB student-athletes @ziggyzyy and @hqgomez14!! They have worked so hard and that hard work is paying off!! Don\u2019t sleep on the our lady Golden Lions in Birmingham! #UAPBLionsAreComing🦁🏐", "createdAt": 1616698145000} to the topic = twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.

RIP to a legend. We owe so much of our o… , sending to Kafka topic twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1011600411822821377, "id": 1375157808711208963, "text": "RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.\n\nRIP to a legend. We owe so much of our o\u2026", "createdAt": 1616698145000} to the topic = twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Venmo: Spring break hits different this year, and we want to #VenmoItForward. RT this post and tag your BFF. We might send you both $50… , sending to Kafka topic twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3138567037, "id": 1375157809113784320, "text": "RT @Venmo: Spring break hits different this year, and we want to #VenmoItForward. RT this post and tag your BFF. We might send you both $50\u2026", "createdAt": 1616698145000} to the topic = twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text A Few New Spring arrivals I store 💕 @ Zebedee Shoes https://t.co/lIL6UNqQB2 , sending to Kafka topic twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 839075245214560256, "id": 1375157809621258242, "text": "A Few New Spring arrivals I store 💕 @ Zebedee Shoes https://t.co/lIL6UNqQB2", "createdAt": 1616698145000} to the topic = twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @GQMagazine: Spring is for colorful hair @kevinabstract https://t.co/qiWilGwqYn , sending to Kafka topic twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 424709405, "id": 1375157810028109826, "text": "RT @GQMagazine: Spring is for colorful hair @kevinabstract https://t.co/qiWilGwqYn", "createdAt": 1616698145000} to the topic = twitter-topic
2021-03-26 00:20:20 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Addisonfleet: Our maintenance team has put together 5 easy tips to get your vehicles ready for the spring/summer season.

Click here to… , sending to Kafka topic twitter-topic
2021-03-26 00:20:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 486902542, "id": 1375157812582580231, "text": "RT @Addisonfleet: Our maintenance team has put together 5 easy tips to get your vehicles ready for the spring/summer season.\n\nClick here to\u2026", "createdAt": 1616698146000} to the topic = twitter-topic
2021-03-26 00:20:21 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text I highly encourage you to check out @PeacebuildersCA Spring For Peace Gala, which will take place virtually this year. Registration is free, and donations are encouraged. @TIEJAInc is a proud partner of Peacebuilders, and we support their advocacy for restorative justice. , sending to Kafka topic twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 19379889, "id": 1375157814532964354, "text": "I highly encourage you to check out @PeacebuildersCA Spring For Peace Gala, which will take place virtually this year. Registration is free, and donations are encouraged. @TIEJAInc is a proud partner of Peacebuilders, and we support their advocacy for restorative justice.", "createdAt": 1616698146000} to the topic = twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Legend. , sending to Kafka topic twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 51025656, "id": 1375157815170437122, "text": "Legend.", "createdAt": 1616698146000} to the topic = twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Check out Hand Knits 2 Love Cotton Slouch Hat Cap Lace Spring Summer Designer Adjustable  https://t.co/Ojth5oih7t @eBay , sending to Kafka topic twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2147584040, "id": 1375157817187835904, "text": "Check out Hand Knits 2 Love Cotton Slouch Hat Cap Lace Spring Summer Designer Adjustable  https://t.co/Ojth5oih7t @eBay", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @FieldsofMistria: Spring is here and Balor has arrived with the cherry blossoms! Will this roguish merchant steal your heart?🌸 https://t… , sending to Kafka topic twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1337380928541380609, "id": 1375157818286870532, "text": "RT @FieldsofMistria: Spring is here and Balor has arrived with the cherry blossoms! Will this roguish merchant steal your heart?🌸 https://t\u2026", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:22 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SBDLWJ0523: spring morning in the mountains of gusu https://t.co/iby8Qs3sOk , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1320433647724466187, "id": 1375157818374885379, "text": "RT @SBDLWJ0523: spring morning in the mountains of gusu https://t.co/iby8Qs3sOk", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Learn more about restorative justice in this Q&A with @PeacebuildersCA 👉 https://t.co/cq8APOH30b

Register for Spring For Peace here 👉 https://t.co/fzhHwB467a , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 19379889, "id": 1375157818123255809, "text": "Learn more about restorative justice in this Q&A with @PeacebuildersCA 👉 https://t.co/cq8APOH30b\n\nRegister for Spring For Peace here 👉 https://t.co/fzhHwB467a", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text ☀️It’s a beautiful spring day for beach balls!

#somacc #earlycareandeducation #earlychildhoodeducation #reggioinspired #reggioemiliaapproach #preschool #outdoortime @ San Francisco, California https://t.co/uVGKx8wfLN , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 47386930, "id": 1375157818261696512, "text": "☀️It\u2019s a beautiful spring day for beach balls!\n\n#somacc #earlycareandeducation #earlychildhoodeducation #reggioinspired #reggioemiliaapproach #preschool #outdoortime @ San Francisco, California https://t.co/uVGKx8wfLN", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @papapap29658703 i have spring halo but u probs wont take it for even just the sets , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1324306611758915590, "id": 1375157818756583428, "text": "@papapap29658703 i have spring halo but u probs wont take it for even just the sets", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.

RIP to a legend. We owe so much of our o… , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1639351914, "id": 1375157818769088519, "text": "RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.\n\nRIP to a legend. We owe so much of our o\u2026", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Celest_Astraea Oh man, I'm glad your city has been good for the most part. Hawaii really hasn't been as horrible as the rest of the US, but it seems like the other states are trying to kill us 💀 gj spring breakers all around the world , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 716002761213657090, "id": 1375157819087806464, "text": "@Celest_Astraea Oh man, I'm glad your city has been good for the most part. Hawaii really hasn't been as horrible as the rest of the US, but it seems like the other states are trying to kill us 💀 gj spring breakers all around the world", "createdAt": 1616698147000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring is in the air and after a long winter, we're all ready for a change. There's no better time to refresh your #interiors! CLIPSO has all you need to update your ceilings & walls. So BRING ON SPRING, with #CLIPSO! 
#clipsocandoit #Division9 #stretchfabric #design #designinspo https://t.co/99OsDEyySG , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 386555251, "id": 1375157820119789568, "text": "Spring is in the air and after a long winter, we're all ready for a change. There's no better time to refresh your #interiors! CLIPSO has all you need to update your ceilings & walls. So BRING ON SPRING, with #CLIPSO! \n#clipsocandoit #Division9 #stretchfabric #design #designinspo https://t.co/99OsDEyySG", "createdAt": 1616698148000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Cuarto: Si quieren consultar algo sobre este hilo dejaré las fuentes de usé para hacerlo justo aquí:

* Documentación de la clase RandomStringUtils: https://t.co/2QbvjR9hka
* Información sobre nextInt: https://t.co/KQB6cxAqQo , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1292522560798838786, "id": 1375157820681814019, "text": "Cuarto: Si quieren consultar algo sobre este hilo dejaré las fuentes de usé para hacerlo justo aquí:\n\n* Documentación de la clase RandomStringUtils: https://t.co/2QbvjR9hka\n* Información sobre nextInt: https://t.co/KQB6cxAqQo", "createdAt": 1616698148000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text I’m probably gonna slowly start to come back on Thursday over spring break , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1258594247571378176, "id": 1375157822263005194, "text": "I\u2019m probably gonna slowly start to come back on Thursday over spring break", "createdAt": 1616698148000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Today's office space for my hoo-man...
#WFH #WorkFromHome #Colorado #Denver #cowx #sunny #spring #productivity #GIS #spatial #shiba #shibainu #dogs #dogsoftwitter https://t.co/yFdDmJi9pw , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1325465753278177280, "id": 1375157821281501184, "text": "Today's office space for my hoo-man...\n#WFH #WorkFromHome #Colorado #Denver #cowx #sunny #spring #productivity #GIS #spatial #shiba #shibainu #dogs #dogsoftwitter https://t.co/yFdDmJi9pw", "createdAt": 1616698148000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MegahammerAudio: It's Spring!🥳

We're having a big ol' sale on some excellent retro SFX and Music Assets! 60% off! 60%!!!

Don't miss o… , sending to Kafka topic twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 871793301132902400, "id": 1375157822745288704, "text": "RT @MegahammerAudio: It's Spring!🥳\n\nWe're having a big ol' sale on some excellent retro SFX and Music Assets! 60% off! 60%!!!\n\nDon't miss o\u2026", "createdAt": 1616698148000} to the topic = twitter-topic
2021-03-26 00:20:23 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Work young fella!!! , sending to Kafka topic twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3884300405, "id": 1375157822724440071, "text": "Work young fella!!!", "createdAt": 1616698148000} to the topic = twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Franz Kafka" Biraz daha uyusam bu olanlardan kurtulabilir miyim" diye soran Kafka gibiyim şu an. , sending to Kafka topic twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 985087516549279744, "id": 1375157824658018312, "text": "Franz Kafka\" Biraz daha uyusam bu olanlardan kurtulabilir miyim\" diye soran Kafka gibiyim şu an.", "createdAt": 1616698149000} to the topic = twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @orchidlady01 @pcaradonna , sending to Kafka topic twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 232678964, "id": 1375157824506986498, "text": "@orchidlady01 @pcaradonna", "createdAt": 1616698149000} to the topic = twitter-topic
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Just added Spring by @mainebeerco to our menu https://t.co/75wkOs3yyG , sending to Kafka topic twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 169247066, "id": 1375157824926457857, "text": "Just added Spring by @mainebeerco to our menu https://t.co/75wkOs3yyG", "createdAt": 1616698149000} to the topic = twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Holy_WifeXX: 🌹
Yellow spring panties to match this gorgeous 70 degree weather. My girls group met today and I treated them to lunch out… , sending to Kafka topic twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1228421193478426624, "id": 1375157825161326597, "text": "RT @Holy_WifeXX: 🌹\nYellow spring panties to match this gorgeous 70 degree weather. My girls group met today and I treated them to lunch out\u2026", "createdAt": 1616698149000} to the topic = twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SS_komu: Hot spring!(Doodle) https://t.co/aOF1MZ3lrS , sending to Kafka topic twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 832784064750891008, "id": 1375157825471664128, "text": "RT @SS_komu: Hot spring!(Doodle) https://t.co/aOF1MZ3lrS", "createdAt": 1616698149000} to the topic = twitter-topic
2021-03-26 00:20:24 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ArianeGermer: Good morning friends💗☕
Happy Thursday everyone..🍀🌳

#painting 
https://t.co/15ASTZ4Fa5

~ Spring Lone Tree ~

by R Chrsto… , sending to Kafka topic twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 565859934, "id": 1375157827208163338, "text": "RT @ArianeGermer: Good morning friends💗☕\nHappy Thursday everyone..🍀🌳\n\n#painting \nhttps://t.co/15ASTZ4Fa5\n\n~ Spring Lone Tree ~\n\nby R Chrsto\u2026", "createdAt": 1616698149000} to the topic = twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text 210325 [ معلومة ]
أغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أكثر من 116.7 مليون استماع🎉

— بانقتان لا زالوا هم الفنان الوحيد الذي يمتلك أغنيتين ضمن الـ Top 5 ( أغنية Boy with luv و Spring day )

@BTS_twt 
-Y https://t.co/RBWZbyC2lP , sending to Kafka topic twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1211974622, "id": 1375157827971452940, "text": "210325 [ معلومة ]\nأغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أكثر من 116.7 مليون استماع🎉\n\n\u2014 بانقتان لا زالوا هم الفنان الوحيد الذي يمتلك أغنيتين ضمن الـ Top 5 ( أغنية Boy with luv و Spring day )\n\n@BTS_twt \n-Y https://t.co/RBWZbyC2lP", "createdAt": 1616698150000} to the topic = twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Camps, camps...and more camps! We offer summer camps for children with a variety of needs. Visit https://t.co/ICmoLwURLC to see what's coming up after Spring Break.   It's never too early to get a head start on planning for summer!  Early Registration Savings end March 31! https://t.co/NhTzBhtOUL , sending to Kafka topic twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 16304122, "id": 1375157829443715076, "text": "Camps, camps...and more camps! We offer summer camps for children with a variety of needs. Visit https://t.co/ICmoLwURLC to see what's coming up after Spring Break.   It's never too early to get a head start on planning for summer!  Early Registration Savings end March 31! https://t.co/NhTzBhtOUL", "createdAt": 1616698150000} to the topic = twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @asalasart: 3 orders awaaay from my monthly goal 🥰🥰🥰

just a RT could help me reach it! , sending to Kafka topic twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1329341796242034688, "id": 1375157830584524801, "text": "RT @asalasart: 3 orders awaaay from my monthly goal 🥰🥰🥰\n\njust a RT could help me reach it!", "createdAt": 1616698150000} to the topic = twitter-topic
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @KSEE24: Spring sees the return of hawks to Clovis' water tower. https://t.co/sf72XCw6IF , sending to Kafka topic twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2782752141, "id": 1375157830865481732, "text": "RT @KSEE24: Spring sees the return of hawks to Clovis' water tower. https://t.co/sf72XCw6IF", "createdAt": 1616698150000} to the topic = twitter-topic
2021-03-26 00:20:25 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @emmbarressed: filistin'i destekleyen namjoon, corona zamanı çocuklar için endişelenen jimin, kara listeye alınma riski olmasına rağmen… , sending to Kafka topic twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1364935928825974784, "id": 1375157831566045185, "text": "RT @emmbarressed: filistin'i destekleyen namjoon, corona zamanı çocuklar için endişelenen jimin, kara listeye alınma riski olmasına rağmen\u2026", "createdAt": 1616698150000} to the topic = twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ExeterAthletics: As we begin Spring Sports at the JHS & SHS, some guidelines for welcoming spectators to our facilities: https://t.co/P… , sending to Kafka topic twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 780924601916284928, "id": 1375157832664907776, "text": "RT @ExeterAthletics: As we begin Spring Sports at the JHS & SHS, some guidelines for welcoming spectators to our facilities: https://t.co/P\u2026", "createdAt": 1616698151000} to the topic = twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Look! No jacket! Also no gloves, scarf, winter boots, frozen limbs, frostbite - #spring - where have you been hiding? https://t.co/zZK7p9ZOzx , sending to Kafka topic twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 103521190, "id": 1375157831943524357, "text": "Look! No jacket! Also no gloves, scarf, winter boots, frozen limbs, frostbite - #spring - where have you been hiding? https://t.co/zZK7p9ZOzx", "createdAt": 1616698150000} to the topic = twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring the most beautiful time of the year #daffodils beautiful flower https://t.co/iXXzEE31Sj , sending to Kafka topic twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3330774851, "id": 1375157832295854086, "text": "Spring the most beautiful time of the year #daffodils beautiful flower https://t.co/iXXzEE31Sj", "createdAt": 1616698151000} to the topic = twitter-topic
2021-03-26 00:20:26 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text From Ryan, Martha’s gardener. 
Happy spring 🐝 https://t.co/4G18VXbJr2 , sending to Kafka topic twitter-topic
2021-03-26 00:20:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4168236371, "id": 1375157835764527104, "text": "From Ryan, Martha\u2019s gardener. \nHappy spring 🐝 https://t.co/4G18VXbJr2", "createdAt": 1616698151000} to the topic = twitter-topic
2021-03-26 00:20:27 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @xiuminforev: spring baby coming through!!!!!! 🌷🦋💕👶🏻💕🦋🌷  

#시우민생일축하해
#HAPPYXIUMINDAY
#나의유일한봄_시우민
#Beginning_of_XIUpring https://t.co/6Qn… , sending to Kafka topic twitter-topic
2021-03-26 00:20:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1211001699550162944, "id": 1375157836372656132, "text": "RT @xiuminforev: spring baby coming through!!!!!! 🌷🦋💕👶🏻💕🦋🌷  \n\n#시우민생일축하해\n#HAPPYXIUMINDAY\n#나의유일한봄_시우민\n#Beginning_of_XIUpring https://t.co/6Qn\u2026", "createdAt": 1616698152000} to the topic = twitter-topic
2021-03-26 00:20:27 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @cryptofawkek: I just listed “Spring is you” for sale on @withFND! 🌐

https://t.co/P4bADTWGs0 

 #nftcollector #nftart #NFTartists https… , sending to Kafka topic twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1361752430237614082, "id": 1375157839757512706, "text": "RT @cryptofawkek: I just listed \u201CSpring is you\u201D for sale on @withFND! 🌐\n\nhttps://t.co/P4bADTWGs0 \n\n #nftcollector #nftart #NFTartists https\u2026", "createdAt": 1616698152000} to the topic = twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.

RIP to a legend. We owe so much of our o… , sending to Kafka topic twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2992807928, "id": 1375157840973864960, "text": "RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.\n\nRIP to a legend. We owe so much of our o\u2026", "createdAt": 1616698153000} to the topic = twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @braves_stats Which is problematic personally, as I don't think Nate has pitched in a televised spring game yet? Maybe I missed the one time he did. , sending to Kafka topic twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 26057856, "id": 1375157841636380673, "text": "@braves_stats Which is problematic personally, as I don't think Nate has pitched in a televised spring game yet? Maybe I missed the one time he did.", "createdAt": 1616698153000} to the topic = twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Mda4life Unreal man.  Why was he trying to do that in spring training? , sending to Kafka topic twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 25166458, "id": 1375157842051751938, "text": "@Mda4life Unreal man.  Why was he trying to do that in spring training?", "createdAt": 1616698153000} to the topic = twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ColtPython18: I see your Islamic mass murderer and raise you 2 black “spring breakers” in Miami who drugged, raped and murdered a white… , sending to Kafka topic twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1195136746524012544, "id": 1375157842768920581, "text": "RT @ColtPython18: I see your Islamic mass murderer and raise you 2 black \u201Cspring breakers\u201D in Miami who drugged, raped and murdered a white\u2026", "createdAt": 1616698153000} to the topic = twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Hackettstown Schools  FREE! Just in time for Spring Break (Grades 2 – 4) Storytime Crossword Puzzle: Peter Rabbit.  A great way to build vocabulary. Students find words in the story to complete the puzzle. Answer key and story included. https://t.co/AmP2gJm6Tp https://t.co/rMGTWEHrhX , sending to Kafka topic twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 917055969238056960, "id": 1375157842366369795, "text": "Hackettstown Schools  FREE! Just in time for Spring Break (Grades 2 \u2013 4) Storytime Crossword Puzzle: Peter Rabbit.  A great way to build vocabulary. Students find words in the story to complete the puzzle. Answer key and story included. https://t.co/AmP2gJm6Tp https://t.co/rMGTWEHrhX", "createdAt": 1616698153000} to the topic = twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @earthdombaby: Full Moon in Libra this Sunday! Since the Moon is in Virgo starting tonight through most of the weekend, it’s a perfect t… , sending to Kafka topic twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1252790127539060737, "id": 1375157843276439553, "text": "RT @earthdombaby: Full Moon in Libra this Sunday! Since the Moon is in Virgo starting tonight through most of the weekend, it\u2019s a perfect t\u2026", "createdAt": 1616698153000} to the topic = twitter-topic
2021-03-26 00:20:28 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text This month I've been coding a Kotlin/Android application from 0 using Kodein, Room, Retrofit and all of the recommended libs.

Despide Kotlin hype, I still find a lot of roadblock solutions in Java (stackoverflow, blogposts)

So, basic Java knowledge is still mandatory , sending to Kafka topic twitter-topic
2021-03-26 00:20:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 8780062, "id": 1375157845855977477, "text": "This month I've been coding a Kotlin/Android application from 0 using Kodein, Room, Retrofit and all of the recommended libs.\n\nDespide Kotlin hype, I still find a lot of roadblock solutions in Java (stackoverflow, blogposts)\n\nSo, basic Java knowledge is still mandatory", "createdAt": 1616698154000} to the topic = twitter-topic
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @liesntruth1026: OP's 84-year-old mother watched Yuta on a Japanese TV show and then she is highly praising Yuta. OP said OP wasn't fami… , sending to Kafka topic twitter-topic
2021-03-26 00:20:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1269189140035190784, "id": 1375157846703108103, "text": "RT @liesntruth1026: OP's 84-year-old mother watched Yuta on a Japanese TV show and then she is highly praising Yuta. OP said OP wasn't fami\u2026", "createdAt": 1616698154000} to the topic = twitter-topic
2021-03-26 00:20:29 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @BNightengale: Vaughn will start in left field Friday in the #WhiteSox spring training game vs. the #Brewers https://t.co/2gXzEgaDp6 , sending to Kafka topic twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1183826999703408641, "id": 1375157847839940608, "text": "RT @BNightengale: Vaughn will start in left field Friday in the #WhiteSox spring training game vs. the #Brewers https://t.co/2gXzEgaDp6", "createdAt": 1616698154000} to the topic = twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PermafrostBeard: Hey, Bean is that hot chocolate any good? 
This time of year up here we are ready for spring, but will get reminded th… , sending to Kafka topic twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 39235291, "id": 1375157850109046787, "text": "RT @PermafrostBeard: Hey, Bean is that hot chocolate any good? \nThis time of year up here we are ready for spring, but will get reminded th\u2026", "createdAt": 1616698155000} to the topic = twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SamParrArt: Just added this #print “Spring Flowers” to my #etsyshop https://t.co/anv5yXMoKU https://t.co/3XDv6AGHzd , sending to Kafka topic twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 19788367, "id": 1375157850239025157, "text": "RT @SamParrArt: Just added this #print \u201CSpring Flowers\u201D to my #etsyshop https://t.co/anv5yXMoKU https://t.co/3XDv6AGHzd", "createdAt": 1616698155000} to the topic = twitter-topic
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @mangotaecreama: As an Uenawol, I can't help but to look out for any similar references that can possibly connect #IU & #SHINee
So far,… , sending to Kafka topic twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 344929041, "id": 1375157850847186944, "text": "RT @mangotaecreama: As an Uenawol, I can't help but to look out for any similar references that can possibly connect #IU & #SHINee\nSo far,\u2026", "createdAt": 1616698155000} to the topic = twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Viola Tricolor.
.
#viola #violatricolor #violatricolorhortensis #gardenpansy #pansy #spring #flower .
.
https://t.co/2qqFKmEZWx https://t.co/yxiMcprxkf , sending to Kafka topic twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 226719153, "id": 1375157850104823811, "text": "Viola Tricolor.\n.\n#viola #violatricolor #violatricolorhortensis #gardenpansy #pansy #spring #flower .\n.\nhttps://t.co/2qqFKmEZWx https://t.co/yxiMcprxkf", "createdAt": 1616698155000} to the topic = twitter-topic
2021-03-26 00:20:30 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [Twitter Stream consumer /  [1][Receiving stream]] INFO  twitter4j.TwitterStreamImpl - Stream closed.
2021-03-26 00:20:31 [Twitter Stream consumer /  [1][Receiving stream]] INFO  twitter4j.TwitterStreamImpl - Stream closed.
2021-03-26 00:20:31 [Twitter Stream consumer /  [1][Receiving stream]] INFO  twitter4j.TwitterStreamImpl - Waiting for 250 milliseconds
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [Twitter Stream consumer /  [1][Waiting for 250 milliseconds]] INFO  twitter4j.TwitterStreamImpl - Establishing connection.
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Connection established.
2021-03-26 00:20:33 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Receiving status stream.
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SteveBenderWx: I’m sorry for the things I said when it was winter...

This weekend the Spring weather finally arrives ☀️ 

Sunday will… , sending to Kafka topic twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 993445987, "id": 1375157861228052480, "text": "RT @SteveBenderWx: I\u2019m sorry for the things I said when it was winter...\n\nThis weekend the Spring weather finally arrives ☀️ \n\nSunday will\u2026", "createdAt": 1616698157000} to the topic = twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @TalkinBaseball_ Trying to catch a home run in a spring training game 
Common sense isn't common.... , sending to Kafka topic twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1325933551888568321, "id": 1375157862792634370, "text": "@TalkinBaseball_ Trying to catch a home run in a spring training game \nCommon sense isn't common....", "createdAt": 1616698158000} to the topic = twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Hilltop_Heights bro if you wanted a spring yard recreation you could've just asked https://t.co/WE3QfBsId6 , sending to Kafka topic twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1097970782293147648, "id": 1375157863291748355, "text": "@Hilltop_Heights bro if you wanted a spring yard recreation you could've just asked https://t.co/WE3QfBsId6", "createdAt": 1616698158000} to the topic = twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text MHSAA Spring Sports Update 3/24/21 https://t.co/rr6WkcgZT8 , sending to Kafka topic twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 231830251, "id": 1375157864034095108, "text": "MHSAA Spring Sports Update 3/24/21 https://t.co/rr6WkcgZT8", "createdAt": 1616698158000} to the topic = twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨

Winner receives Free Driver Fitting at Club Champion, and...

A… , sending to Kafka topic twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 64835162, "id": 1375157864227045379, "text": "RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨\n\nWinner receives Free Driver Fitting at Club Champion, and...\n\nA\u2026", "createdAt": 1616698158000} to the topic = twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Very excited that my painting, “Pocket Squares” received an Honorable Mention award at the Spring Fling exhibition at Colony Square! This painting was inspired by a photograph in a @ctshirts catalog. #charlestyrwhitt #atlantaartist #art #oilpainting #painting #artist https://t.co/lYgQnKE9Xc , sending to Kafka topic twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 215001346, "id": 1375157863769866242, "text": "Very excited that my painting, \u201CPocket Squares\u201D received an Honorable Mention award at the Spring Fling exhibition at Colony Square! This painting was inspired by a photograph in a @ctshirts catalog. #charlestyrwhitt #atlantaartist #art #oilpainting #painting #artist https://t.co/lYgQnKE9Xc", "createdAt": 1616698158000} to the topic = twitter-topic
2021-03-26 00:20:33 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text me da vibes spring day, soy lágrimas , sending to Kafka topic twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2735326731, "id": 1375157866529746950, "text": "me da vibes spring day, soy lágrimas", "createdAt": 1616698159000} to the topic = twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @rie_lah: Join GQ Modeling Squad Monday March 29th in the old gym for our annual spring fashion show. This is a show you DO NOT want to… , sending to Kafka topic twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3345817540, "id": 1375157866873688064, "text": "RT @rie_lah: Join GQ Modeling Squad Monday March 29th in the old gym for our annual spring fashion show. This is a show you DO NOT want to\u2026", "createdAt": 1616698159000} to the topic = twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Click Here to support the Spring High School Band and Color Guard Fundraiser
https://t.co/8rma312lVt , sending to Kafka topic twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 843765440, "id": 1375157867330822149, "text": "Click Here to support the Spring High School Band and Color Guard Fundraiser\nhttps://t.co/8rma312lVt", "createdAt": 1616698159000} to the topic = twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨

Winner receives Free Driver Fitting at Club Champion, and...

A… , sending to Kafka topic twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 461476556, "id": 1375157867775455238, "text": "RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨\n\nWinner receives Free Driver Fitting at Club Champion, and...\n\nA\u2026", "createdAt": 1616698159000} to the topic = twitter-topic
2021-03-26 00:20:34 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @LeannaOrganics: “Spring: a lovely reminder of how beautiful change can truly be.”

– Anonymous , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1251959245790040065, "id": 1375157868958113795, "text": "RT @LeannaOrganics: \u201CSpring: a lovely reminder of how beautiful change can truly be.\u201D\n\n\u2013 Anonymous", "createdAt": 1616698159000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @softdreamer_: spring is around the corner https://t.co/kVJ0hRdi8y , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1322319347709317121, "id": 1375157869423697922, "text": "RT @softdreamer_: spring is around the corner https://t.co/kVJ0hRdi8y", "createdAt": 1616698159000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @saint: First Look: New Balance 550 x Aimé Leon Dore

🗓Spring 2021 https://t.co/MtGE79Xp4x , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2914065049, "id": 1375157870728261639, "text": "RT @saint: First Look: New Balance 550 x Aimé Leon Dore\n\n🗓Spring 2021 https://t.co/MtGE79Xp4x", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Ferrhocious1922: I’m so proud of our @UAPB_VB student-athletes @ziggyzyy and @hqgomez14!! They have worked so hard and that hard work i… , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2339417888, "id": 1375157870749171719, "text": "RT @Ferrhocious1922: I\u2019m so proud of our @UAPB_VB student-athletes @ziggyzyy and @hqgomez14!! They have worked so hard and that hard work i\u2026", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @BillyGoldfeder: SHOWING THE LOVE. Rockland County NY Fire Companies line up to do a birthday drive by for the 6 year old son of Fallen… , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1092950952527704065, "id": 1375157871139188736, "text": "RT @BillyGoldfeder: SHOWING THE LOVE. Rockland County NY Fire Companies line up to do a birthday drive by for the 6 year old son of Fallen\u2026", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @haletoke: 春の京都
Spring in Kyoto https://t.co/pJAkhBijh6 , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 902562549526384640, "id": 1375157871722254345, "text": "RT @haletoke: 春の京都\nSpring in Kyoto https://t.co/pJAkhBijh6", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Today was really warm day, about +8 - +10C

I spent all day walking around the city under spring sunshine.

I guess, this is first happy day since middle of February (exsept my Bday, it was good day too)

I'm full of energy and wanna go for a walk tomorrow too! , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3450469343, "id": 1375157871592243213, "text": "Today was really warm day, about +8 - +10C\n\nI spent all day walking around the city under spring sunshine.\n\nI guess, this is first happy day since middle of February (exsept my Bday, it was good day too)\n\nI'm full of energy and wanna go for a walk tomorrow too!", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @steven94117: what are those? regular pancakes? your children look hungry! now i need pancakes. someone said yesterday pure maple syrup… , sending to Kafka topic twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 793200858208931840, "id": 1375157871894097921, "text": "RT @steven94117: what are those? regular pancakes? your children look hungry! now i need pancakes. someone said yesterday pure maple syrup\u2026", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:35 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @__nicetomeatyou: ซีนสุดท้ายของเอ็มวีน่าจะสื่อว่าไอยูลงมาจากรถไฟในวัย 20s รึเปล่า แล้วเสียงรถไฟที่กำลังจะมาเทียบชานชาลาคือรถไฟของวัย 30s… , sending to Kafka topic twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 440888617, "id": 1375157873542537216, "text": "RT @__nicetomeatyou: ซีนสุดท้ายของเอ็มวีน่าจะสื่อว่าไอยูลงมาจากรถไฟในวัย 20s รึเปล่า แล้วเสียงรถไฟที่กำลังจะมาเทียบชานชาลาคือรถไฟของวัย 30s\u2026", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @_aoikitsune: Today is front zipper day
#フロントジッパーの日 and with the spring coming back, and warmer days, perfect time for me to put on my f… , sending to Kafka topic twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1077406220653350914, "id": 1375157873425182734, "text": "RT @_aoikitsune: Today is front zipper day\n#フロントジッパーの日 and with the spring coming back, and warmer days, perfect time for me to put on my f\u2026", "createdAt": 1616698160000} to the topic = twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ARAB1_ARMY: 210325 [ معلومة ]
أغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك… , sending to Kafka topic twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1029147023927398400, "id": 1375157874637299714, "text": "RT @ARAB1_ARMY: 210325 [ معلومة ]\nأغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك\u2026", "createdAt": 1616698161000} to the topic = twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @LinkGamer56: https://t.co/3iCxKY7YgV

Como crear el skin 3D de @Raptorgamer_ 
En Minecraft Bedrock/Java 

Espero les guste este pequeño… , sending to Kafka topic twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1247198397733486593, "id": 1375157874876411905, "text": "RT @LinkGamer56: https://t.co/3iCxKY7YgV\n\nComo crear el skin 3D de @Raptorgamer_ \nEn Minecraft Bedrock/Java \n\nEspero les guste este pequeño\u2026", "createdAt": 1616698161000} to the topic = twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ImanEurope: winter flowers can’t stay for spring. they die for new life to grow. the same happens in you. accept your new season and le… , sending to Kafka topic twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 757889958506033153, "id": 1375157875182596097, "text": "RT @ImanEurope: winter flowers can\u2019t stay for spring. they die for new life to grow. the same happens in you. accept your new season and le\u2026", "createdAt": 1616698161000} to the topic = twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text spring day japanese version is gonna hit different 🤧 , sending to Kafka topic twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 595679647, "id": 1375157876746903553, "text": "spring day japanese version is gonna hit different 🤧", "createdAt": 1616698161000} to the topic = twitter-topic
2021-03-26 00:20:36 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring 🌸 is behind me and I'm waiting for summer 🌞.. Which season do you like the most? https://t.co/Pb0HiqvtnN , sending to Kafka topic twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2559828508, "id": 1375157877149741060, "text": "Spring 🌸 is behind me and I'm waiting for summer 🌞.. Which season do you like the most? https://t.co/Pb0HiqvtnN", "createdAt": 1616698161000} to the topic = twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Las ofertas de Ubisoft Store parten la pana! https://t.co/r7Bf7SAL6j #OfertonesSpringSaleUbisoft , sending to Kafka topic twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 859955646, "id": 1375157877850189830, "text": "Las ofertas de Ubisoft Store parten la pana! https://t.co/r7Bf7SAL6j #OfertonesSpringSaleUbisoft", "createdAt": 1616698161000} to the topic = twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @charts_k: “Spring Day” has surpassed IU’s “Through the Night” and is now the 4th most streamed song of all-time on Genie. (116.7M)

@BT… , sending to Kafka topic twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1268944037870014465, "id": 1375157879502671872, "text": "RT @charts_k: \u201CSpring Day\u201D has surpassed IU\u2019s \u201CThrough the Night\u201D and is now the 4th most streamed song of all-time on Genie. (116.7M)\n\n@BT\u2026", "createdAt": 1616698162000} to the topic = twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Mdu_Mchunu1: Azzi and Osta Spring/Summer 2020 Haute Couture https://t.co/9nFZuQlRjT , sending to Kafka topic twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 720714680122138624, "id": 1375157880744214528, "text": "RT @Mdu_Mchunu1: Azzi and Osta Spring/Summer 2020 Haute Couture https://t.co/9nFZuQlRjT", "createdAt": 1616698162000} to the topic = twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ARAB1_ARMY: 210325 [ معلومة ]
أغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك… , sending to Kafka topic twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1349766910418812940, "id": 1375157881063026692, "text": "RT @ARAB1_ARMY: 210325 [ معلومة ]\nأغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك\u2026", "createdAt": 1616698162000} to the topic = twitter-topic
2021-03-26 00:20:37 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text The Warwick Southport · Spring Offer - Nextdoor https://t.co/GcleT1x9xi , sending to Kafka topic twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 61334870, "id": 1375157882065420289, "text": "The Warwick Southport · Spring Offer - Nextdoor https://t.co/GcleT1x9xi", "createdAt": 1616698162000} to the topic = twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text E eu que fui falar "guardião yaksha" e falei "guardião Kafka" , sending to Kafka topic twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1174817110461210626, "id": 1375157883642466309, "text": "E eu que fui falar \"guardião yaksha\" e falei \"guardião Kafka\"", "createdAt": 1616698163000} to the topic = twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @faewitches: the full moon in libra is the perfect time for beauty rituals, cleaning & cleansing your home, and making spring decor to d… , sending to Kafka topic twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 574225027, "id": 1375157883571159044, "text": "RT @faewitches: the full moon in libra is the perfect time for beauty rituals, cleaning & cleansing your home, and making spring decor to d\u2026", "createdAt": 1616698163000} to the topic = twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @KelsiJoSilva: HELLO, IT IS TIME FOR ME TO COME OUT OF HIBERNATION FOR SPRING. 

I have a bunch of old stuff deeply discounted just so I… , sending to Kafka topic twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3300747850, "id": 1375157884737126401, "text": "RT @KelsiJoSilva: HELLO, IT IS TIME FOR ME TO COME OUT OF HIBERNATION FOR SPRING. \n\nI have a bunch of old stuff deeply discounted just so I\u2026", "createdAt": 1616698163000} to the topic = twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Today Antique Farmhouse brings us "Sweet Cottage Dreams" collection.  Here is just a peek at some of these great 31 items in this collection.   Tap this ~  https://t.co/WSGc7SjA9k  to see all of the items, and claim yours right away.

#homedecor  #springdecor  #spring https://t.co/lkV5k5aXOj , sending to Kafka topic twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 973418680657829888, "id": 1375157883688607744, "text": "Today Antique Farmhouse brings us \"Sweet Cottage Dreams\" collection.  Here is just a peek at some of these great 31 items in this collection.   Tap this ~  https://t.co/WSGc7SjA9k  to see all of the items, and claim yours right away.\n\n#homedecor  #springdecor  #spring https://t.co/lkV5k5aXOj", "createdAt": 1616698163000} to the topic = twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ARAB1_ARMY: 210325 [ معلومة ]
أغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك… , sending to Kafka topic twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1330985008618729477, "id": 1375157885206937609, "text": "RT @ARAB1_ARMY: 210325 [ معلومة ]\nأغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك\u2026", "createdAt": 1616698163000} to the topic = twitter-topic
2021-03-26 00:20:38 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text In an annual rite of spring, crews began plowing the Chief Mountain Road on the east side of Glacier National Park this week. They typically start on the Two Medicine Road shortly afterward.

Via @HungryHorseNews 

https://t.co/uIlEzTzsOs , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 30267926, "id": 1375157885764657156, "text": "In an annual rite of spring, crews began plowing the Chief Mountain Road on the east side of Glacier National Park this week. They typically start on the Two Medicine Road shortly afterward.\n\nVia @HungryHorseNews \n\nhttps://t.co/uIlEzTzsOs", "createdAt": 1616698163000} to the topic = twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text spring day en japonés salió HACE UN SIGLO, dios, ni siquiera se toman el tiempo de escuchar la discografía de la tannies, lxs odio , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1358478146551623683, "id": 1375157886612078593, "text": "spring day en japonés salió HACE UN SIGLO, dios, ni siquiera se toman el tiempo de escuchar la discografía de la tannies, lxs odio", "createdAt": 1616698164000} to the topic = twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text 'It was one of those days when the sun shines hot and the wind blows cold: when it is summer in the light and winter in the shade.'
#CharlesDickens #March #spring https://t.co/5le7mGxUUF , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 848527361066795010, "id": 1375157886276538369, "text": "'It was one of those days when the sun shines hot and the wind blows cold: when it is summer in the light and winter in the shade.'\n#CharlesDickens #March #spring https://t.co/5le7mGxUUF", "createdAt": 1616698163000} to the topic = twitter-topic
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @nezevanun: Franz Kafka" Biraz daha uyusam bu olanlardan kurtulabilir miyim" derken,
Nietzche" Uyuyunca geçmez. Kalkın Konuşmamız gerek.… , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1241450309563682817, "id": 1375157887891345415, "text": "RT @nezevanun: Franz Kafka\" Biraz daha uyusam bu olanlardan kurtulabilir miyim\" derken,\nNietzche\" Uyuyunca geçmez. Kalkın Konuşmamız gerek.\u2026", "createdAt": 1616698164000} to the topic = twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Thread , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 47395055, "id": 1375157889464156160, "text": "Thread", "createdAt": 1616698164000} to the topic = twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text What are the strengths of the @java community?

Join @otaviojava @brjavaman @elderjava @kvarel4 @yanaga and find out
This week in the @RedHat stand @TheDevConf
https://t.co/Yw8k2wlhma , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1131882651151994880, "id": 1375157889464201219, "text": "What are the strengths of the @java community?\n\nJoin @otaviojava @brjavaman @elderjava @kvarel4 @yanaga and find out\nThis week in the @RedHat stand @TheDevConf\nhttps://t.co/Yw8k2wlhma", "createdAt": 1616698164000} to the topic = twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ACTBrigitte: The @CDCgov begs Americans NOT to travel for Spring Break.

Shouldn't the CDC be begging Joe Biden to close the southern b… , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1181702099798810624, "id": 1375157889862619138, "text": "RT @ACTBrigitte: The @CDCgov begs Americans NOT to travel for Spring Break.\n\nShouldn't the CDC be begging Joe Biden to close the southern b\u2026", "createdAt": 1616698164000} to the topic = twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @HBFashionWeek: @HabThyler  posing for our campaign at FYP Spring Summer 2020
#SeoulFashionWeek #seoulstreetwear #hbfashionweek https://… , sending to Kafka topic twitter-topic
2021-03-26 00:20:39 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 975810028694265856, "id": 1375157889866813440, "text": "RT @HBFashionWeek: @HabThyler  posing for our campaign at FYP Spring Summer 2020\n#SeoulFashionWeek #seoulstreetwear #hbfashionweek https://\u2026", "createdAt": 1616698164000} to the topic = twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @michaelbruntz: Offered 2023 QB Reese Mooney planning to make a visit to Lincoln this spring (VIP). #Huskers 

https://t.co/PSMll5L9Lc , sending to Kafka topic twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1236780985468977152, "id": 1375157891347415043, "text": "RT @michaelbruntz: Offered 2023 QB Reese Mooney planning to make a visit to Lincoln this spring (VIP). #Huskers \n\nhttps://t.co/PSMll5L9Lc", "createdAt": 1616698165000} to the topic = twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @cryptofawkek: I just listed “Spring is you” for sale on @withFND! 🌐

https://t.co/P4bADTWGs0 

 #nftcollector #nftart #NFTartists https… , sending to Kafka topic twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1363552488335560705, "id": 1375157891930394630, "text": "RT @cryptofawkek: I just listed \u201CSpring is you\u201D for sale on @withFND! 🌐\n\nhttps://t.co/P4bADTWGs0 \n\n #nftcollector #nftart #NFTartists https\u2026", "createdAt": 1616698165000} to the topic = twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Cuteness overload 🥰 , sending to Kafka topic twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1028024361377255425, "id": 1375157892668665860, "text": "Cuteness overload 🥰", "createdAt": 1616698165000} to the topic = twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Trek3871D: Florida’s Governor cares more about spring break revenues, than the spread of multiple covid variants. 

Sad when your leade… , sending to Kafka topic twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1279243486592749568, "id": 1375157893054484486, "text": "RT @Trek3871D: Florida\u2019s Governor cares more about spring break revenues, than the spread of multiple covid variants. \n\nSad when your leade\u2026", "createdAt": 1616698165000} to the topic = twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Mdu_Mchunu1: Azzi and Osta Spring/Summer 2020 Haute Couture https://t.co/gAukLcLzm9 , sending to Kafka topic twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 720714680122138624, "id": 1375157893922750465, "text": "RT @Mdu_Mchunu1: Azzi and Osta Spring/Summer 2020 Haute Couture https://t.co/gAukLcLzm9", "createdAt": 1616698165000} to the topic = twitter-topic
2021-03-26 00:20:40 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @fcpsnews: Tomorrow, Friday, March 26, is the end of the third quarter. Students will be dismissed two hours early. Spring break is Marc… , sending to Kafka topic twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 763429013771739136, "id": 1375157894220558343, "text": "RT @fcpsnews: Tomorrow, Friday, March 26, is the end of the third quarter. Students will be dismissed two hours early. Spring break is Marc\u2026", "createdAt": 1616698165000} to the topic = twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨

Winner receives Free Driver Fitting at Club Champion, and...

A… , sending to Kafka topic twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 262274294, "id": 1375157894384074759, "text": "RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨\n\nWinner receives Free Driver Fitting at Club Champion, and...\n\nA\u2026", "createdAt": 1616698165000} to the topic = twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text STOP ABDUCTIONS
#Mar25Coup
#WhatsHappeningInMyanmar
#InternetShutdown , sending to Kafka topic twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1357275973440315396, "id": 1375157895407443973, "text": "STOP ABDUCTIONS\n#Mar25Coup\n#WhatsHappeningInMyanmar\n#InternetShutdown", "createdAt": 1616698166000} to the topic = twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @JohnRMoffitt: I’m attending Harris County Democratic Party’s event, “Virtual Spring JRR: Our Time is Now!” – sign up now to join me!… , sending to Kafka topic twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1969346438, "id": 1375157895982153739, "text": "RT @JohnRMoffitt: I\u2019m attending Harris County Democratic Party\u2019s event, \u201CVirtual Spring JRR: Our Time is Now!\u201D \u2013 sign up now to join me!\u2026", "createdAt": 1616698166000} to the topic = twitter-topic
2021-03-26 00:20:41 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Come celebrate spring riding season with a chance to win a custom Harley-Davidson Motorcycle. #Sweepstakes https://t.co/sloWFlLjH7 , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 930538075784036352, "id": 1375157899048099842, "text": "Come celebrate spring riding season with a chance to win a custom Harley-Davidson Motorcycle. #Sweepstakes https://t.co/sloWFlLjH7", "createdAt": 1616698166000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CoachMirabal: You are WHATEVER you put on FILM!  15 OPPORTUNITIES! https://t.co/HhHmZhGguk , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1365132811540197379, "id": 1375157899446476800, "text": "RT @CoachMirabal: You are WHATEVER you put on FILM!  15 OPPORTUNITIES! https://t.co/HhHmZhGguk", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.

RIP to a legend. We owe so much of our o… , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3306927327, "id": 1375157899454988291, "text": "RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.\n\nRIP to a legend. We owe so much of our o\u2026", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.

RIP to a legend. We owe so much of our o… , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 118104000, "id": 1375157900369354756, "text": "RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.\n\nRIP to a legend. We owe so much of our o\u2026", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text White Silk #SummerDress by Ulla Johnson
RRP: > €800
As worn by Angelina Jolie😍

For sale on #Ebay #Vinted #VestaireCollective
https://t.co/sMc2cv5vPg

#Spring #Fashion #Style #Outfit #Sales #womensfashion #parisian #jadore #скидки #mode #damenmode #sommermode #мода #fashionista https://t.co/w69PLU1Gj2 , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1330502033795911680, "id": 1375157900092579844, "text": "White Silk #SummerDress by Ulla Johnson\nRRP: > \u20AC800\nAs worn by Angelina Jolie😍\n\nFor sale on #Ebay #Vinted #VestaireCollective\nhttps://t.co/sMc2cv5vPg\n\n#Spring #Fashion #Style #Outfit #Sales #womensfashion #parisian #jadore #скидки #mode #damenmode #sommermode #мода #fashionista https://t.co/w69PLU1Gj2", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text We are excited to invite you to our Biacore Online Spring Seminar Series 2021. Learn more about upcoming sessions and improve your Biacore skills. Don't miss out and reserve your place today! #wearecytiva #Biacore https://t.co/ZLKDVenlaN , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 17008971, "id": 1375157900834971648, "text": "We are excited to invite you to our Biacore Online Spring Seminar Series 2021. Learn more about upcoming sessions and improve your Biacore skills. Don't miss out and reserve your place today! #wearecytiva #Biacore https://t.co/ZLKDVenlaN", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @soulful_wraps: Seraphinite wrapped in silver wires featuring a dainty flower charm 
Available TOMORROW 3/26 at 6pm EST on my website 
h… , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1346549651193827328, "id": 1375157901333962752, "text": "RT @soulful_wraps: Seraphinite wrapped in silver wires featuring a dainty flower charm \nAvailable TOMORROW 3/26 at 6pm EST on my website \nh\u2026", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text hi spring bye , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 569774844, "id": 1375157901434576899, "text": "hi spring bye", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring has sprung. https://t.co/jeAjbScEBr , sending to Kafka topic twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 984699953867051009, "id": 1375157901275373572, "text": "Spring has sprung. https://t.co/jeAjbScEBr", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:42 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Mdu_Mchunu1: Azzi and Osta Spring/Summer 2020 Haute Couture https://t.co/khOfTeQpBj , sending to Kafka topic twitter-topic
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 720714680122138624, "id": 1375157902722408449, "text": "RT @Mdu_Mchunu1: Azzi and Osta Spring/Summer 2020 Haute Couture https://t.co/khOfTeQpBj", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ARAB1_ARMY: 210325 [ معلومة ]
أغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك… , sending to Kafka topic twitter-topic
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1024698865616912385, "id": 1375157903192170501, "text": "RT @ARAB1_ARMY: 210325 [ معلومة ]\nأغنية Spring Day تخطت أغنية Through the night لـ آيو وأصبحت رابع أعلى أغنية استماعًا على موقع Genie مع أك\u2026", "createdAt": 1616698167000} to the topic = twitter-topic
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.

RIP to a legend. We owe so much of our o… , sending to Kafka topic twitter-topic
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 15225272, "id": 1375157903775178753, "text": "RT @colormejorge: Jessica Walter doing Spring Awakening in 90210 was so weirdly formative for me.\n\nRIP to a legend. We owe so much of our o\u2026", "createdAt": 1616698168000} to the topic = twitter-topic
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @toddhwagner: Spring riding in the Santa Cruz mountains. Had a couple glimpses of the pacific. https://t.co/4JJfq0EQws , sending to Kafka topic twitter-topic
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1144746389680865281, "id": 1375157904374853632, "text": "RT @toddhwagner: Spring riding in the Santa Cruz mountains. Had a couple glimpses of the pacific. https://t.co/4JJfq0EQws", "createdAt": 1616698168000} to the topic = twitter-topic
2021-03-26 00:20:43 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text L'économie au complet a été mise en pause l'an passé. Les GES ont diminué drastiquement. Ça n'a eu aucun impact sur le climat , sending to Kafka topic twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 354235902, "id": 1375157907625496588, "text": "L'économie au complet a été mise en pause l'an passé. Les GES ont diminué drastiquement. Ça n'a eu aucun impact sur le climat", "createdAt": 1616698169000} to the topic = twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @tourilef: Hello spring 🌷🌼🌳⚘☘ #TubaBüyüküstün https://t.co/NyEqMDOR2A , sending to Kafka topic twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1271766147478753280, "id": 1375157908435042304, "text": "RT @tourilef: Hello spring 🌷🌼🌳⚘☘ #TubaBüyüküstün https://t.co/NyEqMDOR2A", "createdAt": 1616698169000} to the topic = twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @FieldsofMistria: Spring is here and Balor has arrived with the cherry blossoms! Will this roguish merchant steal your heart?🌸 https://t… , sending to Kafka topic twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1214700472474460163, "id": 1375157908439248904, "text": "RT @FieldsofMistria: Spring is here and Balor has arrived with the cherry blossoms! Will this roguish merchant steal your heart?🌸 https://t\u2026", "createdAt": 1616698169000} to the topic = twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Thinking bout taking the family to #Virginia for spring break. 

I got any people’s there? , sending to Kafka topic twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 236985573, "id": 1375157910511161348, "text": "Thinking bout taking the family to #Virginia for spring break. \n\nI got any people\u2019s there?", "createdAt": 1616698169000} to the topic = twitter-topic
2021-03-26 00:20:44 [Twitter4J Async Dispatcher[0]] ERROR i.c.k.s.client.rest.RestService - Failed to send HTTP request to endpoint: http://localhost:8081/subjects/twitter-topic-value/versions
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1226)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:990)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1340)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1315)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:263)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:351)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:494)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:485)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:458)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:206)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:268)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:244)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:74)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:59)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:910)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:870)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:862)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:563)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:369)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.twitteranalytics.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:18)
	at com.twitteranalytics.transportservice.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:35)
	at twitter4j.StatusStreamImpl.onStatus(StatusStreamImpl.java:75)
	at twitter4j.StatusStreamBase$1.run(StatusStreamBase.java:105)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2021-03-26 00:20:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:45 [SpringContextShutdownHook] INFO  c.t.t.runner.impl.StreamRunnerImpl - TwitterStream is not null, closing it
2021-03-26 00:20:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2021-03-26 00:20:45 [SpringContextShutdownHook] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 00:20:45 [SpringContextShutdownHook] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2021-03-26 00:23:31 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 50926 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 00:23:31 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 00:23:32 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 00:23:32 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:23:32 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:23:32 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616698412784
2021-03-26 00:23:33 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 00:23:33 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 1.64 seconds (JVM running for 2.629)
2021-03-26 00:23:33 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 00:23:33 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 Kafka Topics,attempt 0
2021-03-26 00:23:33 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading Kafka Topic [twitter-topic],attempt 0
2021-03-26 00:24:36 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-03-26 00:24:36 [main] ERROR o.s.boot.SpringApplication - Application run failed
java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:809)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:790)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:333)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1313)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1302)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.main(TwittertoKafkaApplication.java:33)
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:126)
	at com.twitteranalytics.transportservice.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:28)
	at com.twitteranalytics.transportservice.TwittertoKafkaApplication.run(TwittertoKafkaApplication.java:40)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:806)
	... 5 common frames omitted
Caused by: com.twitteranalytics.kafka.admin.exceptions.KafkaClientException: Reached Max number of Retries
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkMaxRetry(KafkaAdminClient.java:156)
	at com.twitteranalytics.kafka.admin.client.KafkaAdminClient.checkSchemaRegistry(KafkaAdminClient.java:119)
	... 8 common frames omitted
2021-03-26 00:24:36 [main] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 00:49:39 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 55907 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 00:49:39 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 00:49:40 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 00:49:40 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:49:40 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:49:40 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616699980523
2021-03-26 00:49:41 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 00:49:41 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 2.58 seconds (JVM running for 3.467)
2021-03-26 00:49:41 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 00:49:41 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 Kafka Topics,attempt 0
2021-03-26 00:49:41 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading Kafka Topic [twitter-topic],attempt 0
2021-03-26 00:50:17 [SpringContextShutdownHook] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 00:50:17 [reactor-http-epoll-3] WARN  r.n.http.client.HttpClientConnect - [id:e8bfe4aa-5, L:/127.0.0.1:54756 ! R:localhost/127.0.0.1:8081] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed DURING response
2021-03-26 00:57:02 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 56404 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 00:57:02 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 00:57:03 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 00:57:03 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:57:03 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:57:03 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616700423503
2021-03-26 00:57:04 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 00:57:04 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 2.456 seconds (JVM running for 3.458)
2021-03-26 00:57:04 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 00:57:04 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 topics(s), attempt 0
2021-03-26 00:57:04 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Create topic result [KafkaFuture{value=null,exception=null,done=false}]
2021-03-26 00:57:04 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading kafka topic [twitter-topic], attempt 0
2021-03-26 00:57:04 [main] INFO  c.t.t.i.impl.KafkaStreamInitializer - Topics with names twitter-topic is ready for operations
2021-03-26 00:57:04 [main] INFO  c.t.t.runner.impl.StreamRunnerImpl - Started filtering twitter Stream for keywords [Java, MicroServices, Spring, Kafka, ElasticSearch]
2021-03-26 00:57:04 [Twitter Stream consumer /  [1][initializing]] INFO  twitter4j.TwitterStreamImpl - Establishing connection.
2021-03-26 00:57:05 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Connection established.
2021-03-26 00:57:05 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Receiving status stream.
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring Ball Media Availability - Day 2 🎙 , sending to Kafka topic twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2610114391, "id": 1375167055457001472, "text": "Spring Ball Media Availability - Day 2 🎙", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  o.a.k.c.producer.ProducerConfig - ProducerConfig values: 
	acks = -1
	batch.size = 1638400
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	internal.auto.downgrade.txn.commit = true
	key.serializer = class org.apache.kafka.common.serialization.LongSerializer
	linger.ms = 5
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 60000
	retries = 5
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer

2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  i.c.k.s.KafkaAvroSerializerConfig - KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	proxy.port = -1
	schema.reflection = false
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	proxy.host = 
	use.latest.version = false
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy

2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616700425444
2021-03-26 00:57:05 [kafka-producer-network-thread | producer-1] INFO  org.apache.kafka.clients.Metadata - [Producer clientId=producer-1] Cluster ID: bhRmN-qcRp-GZSGiLIKu3A
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MONIEYOONIE: Canciones que YA tienen versión en japonés (@BTS_twt):

BWL
Make It Right
Dionysus
IDOL
Airplane pt.2
Fake Love
Black Swan… , sending to Kafka topic twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 993678784611135489, "id": 1375167055603892226, "text": "RT @MONIEYOONIE: Canciones que YA tienen versión en japonés (@BTS_twt):\n\nBWL\nMake It Right\nDionysus\nIDOL\nAirplane pt.2\nFake Love\nBlack Swan\u2026", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ImanEurope: winter flowers can’t stay for spring. they die for new life to grow. the same happens in you. accept your new season and le… , sending to Kafka topic twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 56634661, "id": 1375167056157405185, "text": "RT @ImanEurope: winter flowers can\u2019t stay for spring. they die for new life to grow. the same happens in you. accept your new season and le\u2026", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @wiinierox: spring is in the air 🌷🌼🌿🌸🌺✨

subscribe to my onlyfans and watch me take my clothes off — link in bio 

🌷🌼🌿🌸🌺✨ https://t.co/C… , sending to Kafka topic twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1278469533137805313, "id": 1375167056191045634, "text": "RT @wiinierox: spring is in the air 🌷🌼🌿🌸🌺✨\n\nsubscribe to my onlyfans and watch me take my clothes off \u2014 link in bio \n\n🌷🌼🌿🌸🌺✨ https://t.co/C\u2026", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @slav_metalurges: I’ve had a few people reach out to see if I would be doing another round of small affordable bookshelf/mantle sized sc… , sending to Kafka topic twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1625620532, "id": 1375167056912338944, "text": "RT @slav_metalurges: I\u2019ve had a few people reach out to see if I would be doing another round of small affordable bookshelf/mantle sized sc\u2026", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @piece_live: Production Weekly has listed, on their newest issue, that the One Piece Live Action could start filming in Spring 2021 👀 ht… , sending to Kafka topic twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 988877664, "id": 1375167057432608787, "text": "RT @piece_live: Production Weekly has listed, on their newest issue, that the One Piece Live Action could start filming in Spring 2021 👀 ht\u2026", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Our students enjoyed our spring painting craft today!☔️🌼 https://t.co/KGXRHkH5Oi , sending to Kafka topic twitter-topic
2021-03-26 00:57:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1146741187975569408, "id": 1375167057394827267, "text": "Our students enjoyed our spring painting craft today!☔️🌼 https://t.co/KGXRHkH5Oi", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PlayriteSurface: Looking to revamp your garden in time for Spring? 
Enter our competition to win £200 of National Garden Gift Vouchers… , sending to Kafka topic twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 220713777, "id": 1375167059374583808, "text": "RT @PlayriteSurface: Looking to revamp your garden in time for Spring? \nEnter our competition to win £200 of National Garden Gift Vouchers\u2026", "createdAt": 1616700350000} to the topic = twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @soddfather @CoveysBurner Guess we’re gonna find out. I don’t think it is a bad idea to stick him out there in spring training and see what happens. Unless you’re Eloy, it is generally pretty difficult to injure yourself in left field, and an injury is the only downside to testing him there this week. , sending to Kafka topic twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1206881662681919490, "id": 1375167059869458433, "text": "@soddfather @CoveysBurner Guess we\u2019re gonna find out. I don\u2019t think it is a bad idea to stick him out there in spring training and see what happens. Unless you\u2019re Eloy, it is generally pretty difficult to injure yourself in left field, and an injury is the only downside to testing him there this week.", "createdAt": 1616700351000} to the topic = twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨

Winner receives Free Driver Fitting at Club Champion, and...

A… , sending to Kafka topic twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 170805073, "id": 1375167060838334472, "text": "RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨\n\nWinner receives Free Driver Fitting at Club Champion, and...\n\nA\u2026", "createdAt": 1616700351000} to the topic = twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @jessyerinn: Retweet if you love spring/summer dresses 💐😎 https://t.co/Ull0Hwbice , sending to Kafka topic twitter-topic
2021-03-26 00:57:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1313205079080542208, "id": 1375167062264274945, "text": "RT @jessyerinn: Retweet if you love spring/summer dresses 💐😎 https://t.co/Ull0Hwbice", "createdAt": 1616700351000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Organizing your home this Spring? This Wall Hanger is the perfect solution to eliminating countertop clutter in your space! 

Wall hanger: https://t.co/B13fe2A8Gb
Shop the full Spring Collection here: https://t.co/gyiXGyzyhW

#SpringCleaning #HomeDecor https://t.co/8fqz4Np7Zo , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1296547938, "id": 1375167062662873091, "text": "Organizing your home this Spring? This Wall Hanger is the perfect solution to eliminating countertop clutter in your space! \n\nWall hanger: https://t.co/B13fe2A8Gb\nShop the full Spring Collection here: https://t.co/gyiXGyzyhW\n\n#SpringCleaning #HomeDecor https://t.co/8fqz4Np7Zo", "createdAt": 1616700351000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @tiedinnature: snippets from today ~ i've been busy creating ~ getting really excited for my spring update https://t.co/LTOyMAQQ6x , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1062837854894768129, "id": 1375167063292018692, "text": "RT @tiedinnature: snippets from today ~ i've been busy creating ~ getting really excited for my spring update https://t.co/LTOyMAQQ6x", "createdAt": 1616700351000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @whatkatiediduk: Simply peachy 🍑 don’t you think?

Above the equator we are now definitely in Spring and it’s time to start thinking abo… , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 393178491, "id": 1375167063463895040, "text": "RT @whatkatiediduk: Simply peachy 🍑 don\u2019t you think?\n\nAbove the equator we are now definitely in Spring and it\u2019s time to start thinking abo\u2026", "createdAt": 1616700351000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Yea every time I went the ogs were in our face we’d ride their motorcycles and everything lol , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1242498652897189888, "id": 1375167063627550722, "text": "Yea every time I went the ogs were in our face we\u2019d ride their motorcycles and everything lol", "createdAt": 1616700351000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Dont_Ask_Me_Pls From your profile, I can kinda see why you saw plants. Spring has sprung! , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1372756518085357576, "id": 1375167064328003589, "text": "@Dont_Ask_Me_Pls From your profile, I can kinda see why you saw plants. Spring has sprung!", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PDChinaLife: Spring vibes! Check out these patterns created by students from Donghua University in Shanghai which depict female figures… , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1035488408083132416, "id": 1375167064516698113, "text": "RT @PDChinaLife: Spring vibes! Check out these patterns created by students from Donghua University in Shanghai which depict female figures\u2026", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text With housing inventory at a historic low, there has never been a better time to sell your house. Eager homebuyers are on the hunt for a house like yours, so DM me about getting ready to sell this spring. #housinginventory #sellyourhouse #moveuphome #dreamhome #realestate https://t.co/N6vb3BAT1F , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2665864814, "id": 1375167064168570881, "text": "With housing inventory at a historic low, there has never been a better time to sell your house. Eager homebuyers are on the hunt for a house like yours, so DM me about getting ready to sell this spring. #housinginventory #sellyourhouse #moveuphome #dreamhome #realestate https://t.co/N6vb3BAT1F", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @REZAphotography: The liberators
I spent the first day of spring, which coincide with Novruz, the new year, in Baku at the cemetery of t… , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1322147892883300352, "id": 1375167065431142406, "text": "RT @REZAphotography: The liberators\nI spent the first day of spring, which coincide with Novruz, the new year, in Baku at the cemetery of t\u2026", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @FieldsofMistria: Spring is here and Balor has arrived with the cherry blossoms! Will this roguish merchant steal your heart?🌸 https://t… , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2288994609, "id": 1375167065535942661, "text": "RT @FieldsofMistria: Spring is here and Balor has arrived with the cherry blossoms! Will this roguish merchant steal your heart?🌸 https://t\u2026", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text ፨ Pedido⋮ Spring day
➥De⋮ fred weasley 
➥Para⋮ @safeangelina 
⭞〈💌〉፧ obrigado por hoje minha vida🤍🥺 https://t.co/CTs566FTby , sending to Kafka topic twitter-topic
2021-03-26 00:57:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1322245739930595328, "id": 1375167066173505540, "text": "፨ Pedido⋮ Spring day\n➥De⋮ fred weasley \n➥Para⋮ @safeangelina \n⭞〈💌〉፧ obrigado por hoje minha vida🤍🥺 https://t.co/CTs566FTby", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text lucille bluth singing mama who bore me reprise is something I never knew I needed , sending to Kafka topic twitter-topic
2021-03-26 00:57:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2271058518, "id": 1375167067545088005, "text": "lucille bluth singing mama who bore me reprise is something I never knew I needed", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Excited to share this item from my #etsy shop: Sunflower Long Welcome Sign with Faux Sunflower and Bow - Handmade #spring #summer #garden #sunflowrt #sunflowers #flowers #sunshine #shopsmall https://t.co/GlzUJ4m0KH https://t.co/re41SunSEd , sending to Kafka topic twitter-topic
2021-03-26 00:57:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3018486976, "id": 1375167066617962498, "text": "Excited to share this item from my #etsy shop: Sunflower Long Welcome Sign with Faux Sunflower and Bow - Handmade #spring #summer #garden #sunflowrt #sunflowers #flowers #sunshine #shopsmall https://t.co/GlzUJ4m0KH https://t.co/re41SunSEd", "createdAt": 1616700352000} to the topic = twitter-topic
2021-03-26 00:57:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text COMO NO TE PUEDO DECIR QUE NO , sending to Kafka topic twitter-topic
2021-03-26 00:57:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 802951795, "id": 1375167069474394115, "text": "COMO NO TE PUEDO DECIR QUE NO", "createdAt": 1616700353000} to the topic = twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @dreamingofnashe Funny enough it’s meant to be spring so it should warm up 🤣 , sending to Kafka topic twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1280103181591162882, "id": 1375167076357263365, "text": "@dreamingofnashe Funny enough it\u2019s meant to be spring so it should warm up 🤣", "createdAt": 1616700355000} to the topic = twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Hit refresh on spring with the chic Valaska cropped tie-front blouse and Hillary high-waisted shorts 🌾. #velvetheart https://t.co/F7UCvsvMlG , sending to Kafka topic twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 278741528, "id": 1375167076051124237, "text": "Hit refresh on spring with the chic Valaska cropped tie-front blouse and Hillary high-waisted shorts 🌾. #velvetheart https://t.co/F7UCvsvMlG", "createdAt": 1616700354000} to the topic = twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text We've still got some great sales happening as winter winds down into spring. Take a peek:⠀
⠀
SALES:⠀
❄️Helmets and Goggles: 40% OFF (use code "HEAD40" online)⠀⠀
❄️Ski Mitts/Gloves: 30% OFF (use code "HAND30" online)⠀⠀
❄️Ski Jackets and Pants: 50% OFF (auto applies online) https://t.co/yRh5MPe4Gf , sending to Kafka topic twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 65634524, "id": 1375167076114034692, "text": "We've still got some great sales happening as winter winds down into spring. Take a peek:⠀\n⠀\nSALES:⠀\n❄️Helmets and Goggles: 40% OFF (use code \"HEAD40\" online)⠀⠀\n❄️Ski Mitts/Gloves: 30% OFF (use code \"HAND30\" online)⠀⠀\n❄️Ski Jackets and Pants: 50% OFF (auto applies online) https://t.co/yRh5MPe4Gf", "createdAt": 1616700354000} to the topic = twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CannabisCultu13: Livraison🌿à domicile 
Ajouter pour commande
Snap: lewils2020 

#paris #citation #saintdenis #Python #Java #JavaScript… , sending to Kafka topic twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1325065495964344320, "id": 1375167077871448064, "text": "RT @CannabisCultu13: Livraison🌿à domicile \nAjouter pour commande\nSnap: lewils2020 \n\n#paris #citation #saintdenis #Python #Java #JavaScript\u2026", "createdAt": 1616700355000} to the topic = twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @sevenoffourteen MOOD... Just chill nature sounds, nice refreshing spring breeze, the smell of trees and dirt...

...And overhearing super loud sex moans from a nearby tent XDXDXD , sending to Kafka topic twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1076919763547373571, "id": 1375167077934321669, "text": "@sevenoffourteen MOOD... Just chill nature sounds, nice refreshing spring breeze, the smell of trees and dirt...\n\n...And overhearing super loud sex moans from a nearby tent XDXDXD", "createdAt": 1616700355000} to the topic = twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Bismarck_QC Spring arrived *fast* , sending to Kafka topic twitter-topic
2021-03-26 00:57:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 906912693948428288, "id": 1375167078009860101, "text": "@Bismarck_QC Spring arrived *fast*", "createdAt": 1616700355000} to the topic = twitter-topic
2021-03-26 00:57:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PRADAXBBY: spring wardrobes https://t.co/3rRAMGBLuO , sending to Kafka topic twitter-topic
2021-03-26 00:57:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1340202747988205568, "id": 1375167081033953283, "text": "RT @PRADAXBBY: spring wardrobes https://t.co/3rRAMGBLuO", "createdAt": 1616700356000} to the topic = twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @BoXiaoCNSub: Beitang Moran & Baili Hongyi

When spring outing, I find the beauty I love at first sight by the River. 
Cr
小鸟3号机09955 htt… , sending to Kafka topic twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1294126273514467330, "id": 1375167085232320512, "text": "RT @BoXiaoCNSub: Beitang Moran & Baili Hongyi\n\nWhen spring outing, I find the beauty I love at first sight by the River. \nCr\n小鸟3号机09955 htt\u2026", "createdAt": 1616700357000} to the topic = twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PlayriteSurface: Looking to revamp your garden in time for Spring? 
Enter our competition to win £200 of National Garden Gift Vouchers… , sending to Kafka topic twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 23423631, "id": 1375167085404381192, "text": "RT @PlayriteSurface: Looking to revamp your garden in time for Spring? \nEnter our competition to win £200 of National Garden Gift Vouchers\u2026", "createdAt": 1616700357000} to the topic = twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @LastChanceUAlum: Spring football has started at @HawaiiFootball and Dior Scott (@DiGiornio_4Chz) is on scholarship this year https://t.… , sending to Kafka topic twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 177051548, "id": 1375167085718855681, "text": "RT @LastChanceUAlum: Spring football has started at @HawaiiFootball and Dior Scott (@DiGiornio_4Chz) is on scholarship this year https://t.\u2026", "createdAt": 1616700357000} to the topic = twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text So happy spring is coming , sending to Kafka topic twitter-topic
2021-03-26 00:57:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 759962905311711232, "id": 1375167087962955778, "text": "So happy spring is coming", "createdAt": 1616700357000} to the topic = twitter-topic
2021-03-26 00:57:13 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @GamecockCentral: #Gamecocks head coach Shane Beamer excited about receiver position this spring https://t.co/f5O17ROxrm , sending to Kafka topic twitter-topic
2021-03-26 00:57:13 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 876383324, "id": 1375167088973774854, "text": "RT @GamecockCentral: #Gamecocks head coach Shane Beamer excited about receiver position this spring https://t.co/f5O17ROxrm", "createdAt": 1616700358000} to the topic = twitter-topic
2021-03-26 00:57:13 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @TheMangoViking: *Lanky Kong wants to know your location* https://t.co/B1N9GUoNxw , sending to Kafka topic twitter-topic
2021-03-26 00:57:13 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2368273633, "id": 1375167091272208392, "text": "RT @TheMangoViking: *Lanky Kong wants to know your location* https://t.co/B1N9GUoNxw", "createdAt": 1616700358000} to the topic = twitter-topic
2021-03-26 00:57:14 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CryptoLoren: Get ready for the Spring-Summer of 2021, and support the International Cryptozoology Museum with the purchase of these new… , sending to Kafka topic twitter-topic
2021-03-26 00:57:14 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4624252485, "id": 1375167094719975426, "text": "RT @CryptoLoren: Get ready for the Spring-Summer of 2021, and support the International Cryptozoology Museum with the purchase of these new\u2026", "createdAt": 1616700359000} to the topic = twitter-topic
2021-03-26 00:57:14 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Por esto mismo pienso rehacer este viewer de Funciones de Onda en Orbitales del Átomo de H basado en sus números cuánticos. 
Es una herramienta increíble hecha en JAVA. O sea la hizo Lucifer

https://t.co/ONWHZeC2AA , sending to Kafka topic twitter-topic
2021-03-26 00:57:14 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1161080757370150912, "id": 1375167095294558209, "text": "Por esto mismo pienso rehacer este viewer de Funciones de Onda en Orbitales del Átomo de H basado en sus números cuánticos. \nEs una herramienta increíble hecha en JAVA. O sea la hizo Lucifer\n\nhttps://t.co/ONWHZeC2AA", "createdAt": 1616700359000} to the topic = twitter-topic
2021-03-26 00:57:14 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @_DMfit: 🌷Spring is here https://t.co/WcWLQzgQBD , sending to Kafka topic twitter-topic
2021-03-26 00:57:14 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1210965538936999936, "id": 1375167096292708354, "text": "RT @_DMfit: 🌷Spring is here https://t.co/WcWLQzgQBD", "createdAt": 1616700359000} to the topic = twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @titsay: spring has arrived 
- 
gouache on watercolor paper https://t.co/Qvs4eun1JL , sending to Kafka topic twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1374778035908448257, "id": 1375167097676779522, "text": "RT @titsay: spring has arrived \n- \ngouache on watercolor paper https://t.co/Qvs4eun1JL", "createdAt": 1616700360000} to the topic = twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @EnergyBanka: #QM & #Q🔌Oxygen 🍯HoneyPot #LOPHAЖ into M44 BeeHiver Cancer Networking Stock head, from Solar Proton [■] Arctrus Powerd by… , sending to Kafka topic twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 78178250, "id": 1375167099002294273, "text": "RT @EnergyBanka: #QM & #Q🔌Oxygen 🍯HoneyPot #LOPHAЖ into M44 BeeHiver Cancer Networking Stock head, from Solar Proton [■] Arctrus Powerd by\u2026", "createdAt": 1616700360000} to the topic = twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Not having a spring break is REALLY starting to have an effect on my motivation levels 🥲 , sending to Kafka topic twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2696549052, "id": 1375167099644096513, "text": "Not having a spring break is REALLY starting to have an effect on my motivation levels 🥲", "createdAt": 1616700360000} to the topic = twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text o spring break foi feito pra gnt descansar pq vc ta dando tarefa pra gente professorrrrrrr , sending to Kafka topic twitter-topic
2021-03-26 00:57:15 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1276318101865283584, "id": 1375167099719442433, "text": "o spring break foi feito pra gnt descansar pq vc ta dando tarefa pra gente professorrrrrrr", "createdAt": 1616700360000} to the topic = twitter-topic
2021-03-26 00:57:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @RetroNewsNow: 🎬Sean S. Cunningham’s ‘Spring Break’ premiered in theaters 38 years ago today, March 25, 1983 https://t.co/wEgTsiC3dk , sending to Kafka topic twitter-topic
2021-03-26 00:57:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 25760015, "id": 1375167102437314565, "text": "RT @RetroNewsNow: 🎬Sean S. Cunningham\u2019s \u2018Spring Break\u2019 premiered in theaters 38 years ago today, March 25, 1983 https://t.co/wEgTsiC3dk", "createdAt": 1616700361000} to the topic = twitter-topic
2021-03-26 00:57:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @BrettRichards67 @Frankgr87839318 @ChadGilmartinCA @kayleighmcenany @PressSec Back to my point because you struggle with trends & numbers. The numbers starting edging upward in October. The numbers historically grow in the spring. Now its the spring. , sending to Kafka topic twitter-topic
2021-03-26 00:57:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1288300404250468352, "id": 1375167102290649100, "text": "@BrettRichards67 @Frankgr87839318 @ChadGilmartinCA @kayleighmcenany @PressSec Back to my point because you struggle with trends & numbers. The numbers starting edging upward in October. The numbers historically grow in the spring. Now its the spring.", "createdAt": 1616700361000} to the topic = twitter-topic
2021-03-26 00:57:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @KentStFootball: 1st Spring Practice ✔️

#FlashFAST⚡️| #BeTheAlpha🦅 https://t.co/G4Nx0ip9zF , sending to Kafka topic twitter-topic
2021-03-26 00:57:16 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1698415831, "id": 1375167104228397061, "text": "RT @KentStFootball: 1st Spring Practice ✔️\n\n#FlashFAST⚡️| #BeTheAlpha🦅 https://t.co/G4Nx0ip9zF", "createdAt": 1616700361000} to the topic = twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @AMcPol: @Javierito321 Y que me dices de la chica blanca que dos negros violaron y mataron este spring brake en Miami Beach??? Ningún me… , sending to Kafka topic twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 479076164, "id": 1375167105214070786, "text": "RT @AMcPol: @Javierito321 Y que me dices de la chica blanca que dos negros violaron y mataron este spring brake en Miami Beach??? Ningún me\u2026", "createdAt": 1616700361000} to the topic = twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text This is an April fools joke , sending to Kafka topic twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 417557176, "id": 1375167105352404992, "text": "This is an April fools joke", "createdAt": 1616700361000} to the topic = twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @schiaplicious: Amber Valletta for Versace spring 2003 ad campaign. Shots by Steven Meisel https://t.co/AVvZFvBXCM , sending to Kafka topic twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4915489213, "id": 1375167105507545088, "text": "RT @schiaplicious: Amber Valletta for Versace spring 2003 ad campaign. Shots by Steven Meisel https://t.co/AVvZFvBXCM", "createdAt": 1616700361000} to the topic = twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Amazonランキング:12位

Apple AirPods Pro(04:26)
https://t.co/mihqkPGiIw , sending to Kafka topic twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2433651774, "id": 1375167106468093957, "text": "Amazonランキング:12位\n\nApple AirPods Pro(04:26)\nhttps://t.co/mihqkPGiIw", "createdAt": 1616700362000} to the topic = twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text These @nordstrom deals get us every time. 🙌🛒🛍 https://t.co/dBiaw7aMvK , sending to Kafka topic twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 17548474, "id": 1375167108112334851, "text": "These @nordstrom deals get us every time. 🙌🛒🛍 https://t.co/dBiaw7aMvK", "createdAt": 1616700362000} to the topic = twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @IvyKungu: forget the spring solstice, the day this video pops on your tl marks the true start of spring , sending to Kafka topic twitter-topic
2021-03-26 00:57:17 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1607349848, "id": 1375167108598833154, "text": "RT @IvyKungu: forget the spring solstice, the day this video pops on your tl marks the true start of spring", "createdAt": 1616700362000} to the topic = twitter-topic
2021-03-26 00:57:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MissingKids: Kristen was last seen on January 2, 2020 in Spring, #Texas. 
https://t.co/pL3c9zYmYY , sending to Kafka topic twitter-topic
2021-03-26 00:57:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 144567739, "id": 1375167110855471122, "text": "RT @MissingKids: Kristen was last seen on January 2, 2020 in Spring, #Texas. \nhttps://t.co/pL3c9zYmYY", "createdAt": 1616700363000} to the topic = twitter-topic
2021-03-26 00:57:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @teamwangofcl: L’officiel Hommes Korea
SPRING/SUMMER 2021
@JacksonWang852
.
#JacksonWang 
#TEAMWANG 
#LofficielHommes https://t.co/CaUlQ… , sending to Kafka topic twitter-topic
2021-03-26 00:57:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1285448954956574723, "id": 1375167111245389824, "text": "RT @teamwangofcl: L\u2019officiel Hommes Korea\nSPRING/SUMMER 2021\n@JacksonWang852\n.\n#JacksonWang \n#TEAMWANG \n#LofficielHommes https://t.co/CaUlQ\u2026", "createdAt": 1616700363000} to the topic = twitter-topic
2021-03-26 00:57:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @DrNiemczura: https://t.co/GG98HNTSIX https://t.co/SUZj6x2J2u , sending to Kafka topic twitter-topic
2021-03-26 00:57:18 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2615995854, "id": 1375167113208463366, "text": "RT @DrNiemczura: https://t.co/GG98HNTSIX https://t.co/SUZj6x2J2u", "createdAt": 1616700363000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Excited to share this item from my #etsy shop: Sunflower Long Welcome Sign with Faux Sunflower and Bow - Handmade #spring #summer #garden #sunflower #sunflowers #flowers #sunshine #shopsmall https://t.co/GlzUJ4m0KH https://t.co/Dj9hkcX5iC , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3018486976, "id": 1375167112767959041, "text": "Excited to share this item from my #etsy shop: Sunflower Long Welcome Sign with Faux Sunflower and Bow - Handmade #spring #summer #garden #sunflower #sunflowers #flowers #sunshine #shopsmall https://t.co/GlzUJ4m0KH https://t.co/Dj9hkcX5iC", "createdAt": 1616700363000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ACTBrigitte: The @CDCgov begs Americans NOT to travel for Spring Break.

Shouldn't the CDC be begging Joe Biden to close the southern b… , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 27962573, "id": 1375167113913102336, "text": "RT @ACTBrigitte: The @CDCgov begs Americans NOT to travel for Spring Break.\n\nShouldn't the CDC be begging Joe Biden to close the southern b\u2026", "createdAt": 1616700363000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Hermoso.... , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 920575642315509760, "id": 1375167114034745347, "text": "Hermoso....", "createdAt": 1616700364000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @bailierosenlund: Welcoming Spring
#illustration #spring https://t.co/pVkPfh50pZ , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1172948771870654466, "id": 1375167114835755009, "text": "RT @bailierosenlund: Welcoming Spring\n#illustration #spring https://t.co/pVkPfh50pZ", "createdAt": 1616700364000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MattConnerAA: It's the spring of 2037: "The Chiefs have announced the re-signing of Daniel Sorensen, Demarcus Robinson, Bashaud Breelan… , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 820749751436111872, "id": 1375167115167199232, "text": "RT @MattConnerAA: It's the spring of 2037: \"The Chiefs have announced the re-signing of Daniel Sorensen, Demarcus Robinson, Bashaud Breelan\u2026", "createdAt": 1616700364000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @gp_pulipaka: 8 Interesting Books About AI. #BigData #Analytics #DataScience #IoT #IIoT #PyTorch #Python #RStats #TensorFlow #Java #Java… , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2326296864, "id": 1375167115519483911, "text": "RT @gp_pulipaka: 8 Interesting Books About AI. #BigData #Analytics #DataScience #IoT #IIoT #PyTorch #Python #RStats #TensorFlow #Java #Java\u2026", "createdAt": 1616700364000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @mkbernz Leeta ggwe. People eat spring rolls 😄😄 , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 245704122, "id": 1375167116421308416, "text": "@mkbernz Leeta ggwe. People eat spring rolls 😄😄", "createdAt": 1616700364000} to the topic = twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Let’s go Owls!!! 🦉 🥎 🦉 🥎 , sending to Kafka topic twitter-topic
2021-03-26 00:57:19 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1111287187679653889, "id": 1375167116987482133, "text": "Let\u2019s go Owls!!! 🦉 🥎 🦉 🥎", "createdAt": 1616700364000} to the topic = twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @RicFlairNatrBoy: On This WOOOOO Wednesday, I Can’t Help Myself From Thinking About How Many Times I WOOOOO’ed During Many Spring Breaks… , sending to Kafka topic twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1356666733063528452, "id": 1375167118027669504, "text": "RT @RicFlairNatrBoy: On This WOOOOO Wednesday, I Can\u2019t Help Myself From Thinking About How Many Times I WOOOOO\u2019ed During Many Spring Breaks\u2026", "createdAt": 1616700364000} to the topic = twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @1974Baseball: There is so much to like about this spring training photo: Reggie's uniform and batting helmet; Stretch making Reggie loo… , sending to Kafka topic twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 14174776, "id": 1375167118753337345, "text": "RT @1974Baseball: There is so much to like about this spring training photo: Reggie's uniform and batting helmet; Stretch making Reggie loo\u2026", "createdAt": 1616700365000} to the topic = twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨

Winner receives Free Driver Fitting at Club Champion, and...

A… , sending to Kafka topic twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 951195355059818497, "id": 1375167120179392522, "text": "RT @PGAPappas: 🚨 PGAPappas Swing into Spring with Club Champion GIVEAWAY 🚨\n\nWinner receives Free Driver Fitting at Club Champion, and...\n\nA\u2026", "createdAt": 1616700365000} to the topic = twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text spring fever 🍃 https://t.co/x46nV40nDE , sending to Kafka topic twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 998754835603361792, "id": 1375167119403462663, "text": "spring fever 🍃 https://t.co/x46nV40nDE", "createdAt": 1616700365000} to the topic = twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text First flowers!  SQUEEEE! Sing!  Dance ! SPRING! #spring https://t.co/Ma1VPywgsX , sending to Kafka topic twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 273219945, "id": 1375167120879841283, "text": "First flowers!  SQUEEEE! Sing!  Dance ! SPRING! #spring https://t.co/Ma1VPywgsX", "createdAt": 1616700365000} to the topic = twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Middle Tennessee Electric urges spring storm preparedness and safety https://t.co/YykyiUQhR3 https://t.co/nxm392Vrue , sending to Kafka topic twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1169084353, "id": 1375167120258949120, "text": "Middle Tennessee Electric urges spring storm preparedness and safety https://t.co/YykyiUQhR3 https://t.co/nxm392Vrue", "createdAt": 1616700365000} to the topic = twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @BlueChairBayRum: Where flowers bloom, there is a cocktail too! 
💐SPRING MARTINI 🐇 ⁠https://t.co/BhDxVEfEVM #BCBHappyHour , sending to Kafka topic twitter-topic
2021-03-26 00:57:20 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 28402455, "id": 1375167121429266437, "text": "RT @BlueChairBayRum: Where flowers bloom, there is a cocktail too! \n💐SPRING MARTINI 🐇 \u2060https://t.co/BhDxVEfEVM #BCBHappyHour", "createdAt": 1616700365000} to the topic = twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Tactical_review Stick with a door hinge and lock, spring door jams for the tripod and I have no idea what the mouse trap is for. 🤷‍♂️ , sending to Kafka topic twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1164248698928451585, "id": 1375167122368761860, "text": "@Tactical_review Stick with a door hinge and lock, spring door jams for the tripod and I have no idea what the mouse trap is for. 🤷\u200D♂️", "createdAt": 1616700365000} to the topic = twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @TAEJUNNIST: first day of spring break and iu’s lilac release and my best friend brought me to a flower shop/ coffee shop 🥺🌸 https://t.c… , sending to Kafka topic twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 582157489, "id": 1375167122641391617, "text": "RT @TAEJUNNIST: first day of spring break and iu\u2019s lilac release and my best friend brought me to a flower shop/ coffee shop 🥺🌸 https://t.c\u2026", "createdAt": 1616700366000} to the topic = twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @shopoyemwen: Spring is in full bloom with our lovely Blossom Dress! Sizes xs-5x https://t.co/QnTj6r86L4 , sending to Kafka topic twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 95024598, "id": 1375167124122046470, "text": "RT @shopoyemwen: Spring is in full bloom with our lovely Blossom Dress! Sizes xs-5x https://t.co/QnTj6r86L4", "createdAt": 1616700366000} to the topic = twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text finally on spring break time to binge watch kdramas and anime , sending to Kafka topic twitter-topic
2021-03-26 00:57:21 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1070283578678931456, "id": 1375167124390416389, "text": "finally on spring break time to binge watch kdramas and anime", "createdAt": 1616700366000} to the topic = twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Check out this listing I just added to my #Poshmark closet: Columbia Benton Spring Full ZIP Jacket Siz…. https://t.co/9crHU2ufC7 #shopmycloset @poshmarkapp , sending to Kafka topic twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1334713157911101441, "id": 1375167126156111876, "text": "Check out this listing I just added to my #Poshmark closet: Columbia Benton Spring Full ZIP Jacket Siz\u2026. https://t.co/9crHU2ufC7 #shopmycloset @poshmarkapp", "createdAt": 1616700366000} to the topic = twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text meu closet vai ser assim , sending to Kafka topic twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 880063896207360000, "id": 1375167127162925059, "text": "meu closet vai ser assim", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @jwkritchie: Nice surprise to see @MiguelNoveloCrz at @StanfordHAI's spring conference presenting his work! https://t.co/HaIJ5J2WQc , sending to Kafka topic twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 365027112, "id": 1375167127838060545, "text": "RT @jwkritchie: Nice surprise to see @MiguelNoveloCrz at @StanfordHAI's spring conference presenting his work! https://t.co/HaIJ5J2WQc", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring 🌸 is behind me and I'm waiting for summer 🌞.. Which season do you like the most? https://t.co/CmSaJ1RdXU , sending to Kafka topic twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 80177758, "id": 1375167128047869964, "text": "Spring 🌸 is behind me and I'm waiting for summer 🌞.. Which season do you like the most? https://t.co/CmSaJ1RdXU", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text ︻╦デ╤━TK━╤デ╦︻ , sending to Kafka topic twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1316127357015674886, "id": 1375167128567959557, "text": "︻╦デ╤━TK━╤デ╦︻", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @charts_k: .@BTS_twt’s “Spring Day” has entered Top 30 of Melon 24Hits. , sending to Kafka topic twitter-topic
2021-03-26 00:57:22 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1320129096060260352, "id": 1375167129767477251, "text": "RT @charts_k: .@BTS_twt\u2019s \u201CSpring Day\u201D has entered Top 30 of Melon 24Hits.", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @WayneSchoolsNJ: We request your kind attention to the following guidelines that will continue to be implemented upon our return from Sp… , sending to Kafka topic twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2394620850, "id": 1375167130161799175, "text": "RT @WayneSchoolsNJ: We request your kind attention to the following guidelines that will continue to be implemented upon our return from Sp\u2026", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Catch me looking like an Easter egg all spring :))) I <3 pastels , sending to Kafka topic twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 574178211, "id": 1375167130455449600, "text": "Catch me looking like an Easter egg all spring :))) I <3 pastels", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @gmanews: IU marks her comeback as she welcomes spring with a music video for her fifth album “Lilac.” https://t.co/IrnosvmiGU , sending to Kafka topic twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1309899999086485505, "id": 1375167130564395008, "text": "RT @gmanews: IU marks her comeback as she welcomes spring with a music video for her fifth album \u201CLilac.\u201D https://t.co/IrnosvmiGU", "createdAt": 1616700367000} to the topic = twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Qg_Barmys: 🔮 Weverse - Namjoon 

'You Quiz' ..
 por que eu tive que fazer o refrão de 'Spring Day'

 por um segundo minha vida passou p… , sending to Kafka topic twitter-topic
2021-03-26 00:57:23 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 794392387028185089, "id": 1375167133357907970, "text": "RT @Qg_Barmys: 🔮 Weverse - Namjoon \n\n'You Quiz' ..\n por que eu tive que fazer o refrão de 'Spring Day'\n\n por um segundo minha vida passou p\u2026", "createdAt": 1616700368000} to the topic = twitter-topic
2021-03-26 00:57:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @DanteFasci: Spring 💪 https://t.co/ZSWAFBfWC0 , sending to Kafka topic twitter-topic
2021-03-26 00:57:24 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 794618082740158464, "id": 1375167138370101251, "text": "RT @DanteFasci: Spring 💪 https://t.co/ZSWAFBfWC0", "createdAt": 1616700369000} to the topic = twitter-topic
2021-03-26 00:57:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @HamillHimself: At last, a truly blue food!!! * 😋

*(blueberries are purple) , sending to Kafka topic twitter-topic
2021-03-26 00:57:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 574378399, "id": 1375167138718171138, "text": "RT @HamillHimself: At last, a truly blue food!!! * 😋\n\n*(blueberries are purple)", "createdAt": 1616700369000} to the topic = twitter-topic
2021-03-26 00:57:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @charts_k: .@BTS_twt’s “Spring Day” has entered Top 30 of Melon 24Hits. , sending to Kafka topic twitter-topic
2021-03-26 00:57:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3307361040, "id": 1375167141809250305, "text": "RT @charts_k: .@BTS_twt\u2019s \u201CSpring Day\u201D has entered Top 30 of Melon 24Hits.", "createdAt": 1616700370000} to the topic = twitter-topic
2021-03-26 00:57:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @beaniebabybot: Sakura the bear.
Birthday: March 25, 2000.
“I am the treasure of Japan
I will bring spring and love to you
A hug will wa… , sending to Kafka topic twitter-topic
2021-03-26 00:57:25 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1201334041578033153, "id": 1375167142270668801, "text": "RT @beaniebabybot: Sakura the bear.\nBirthday: March 25, 2000.\n\u201CI am the treasure of Japan\nI will bring spring and love to you\nA hug will wa\u2026", "createdAt": 1616700370000} to the topic = twitter-topic
2021-03-26 00:57:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @m_cheeky_w @BahamaBen9 Mark I have found that there seem to be some natural correction patterns especially in Tech early spring and early fall, so it may be a good idea to save up money during the runs and buy those dips in spring and fall. , sending to Kafka topic twitter-topic
2021-03-26 00:57:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2841841749, "id": 1375167142895755266, "text": "@m_cheeky_w @BahamaBen9 Mark I have found that there seem to be some natural correction patterns especially in Tech early spring and early fall, so it may be a good idea to save up money during the runs and buy those dips in spring and fall.", "createdAt": 1616700370000} to the topic = twitter-topic
2021-03-26 00:57:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PaulVermeersch: Hey everyone, this book by 
@toluini definitely looks like one to watch for this spring. Coming soon from @PalimpsestPr… , sending to Kafka topic twitter-topic
2021-03-26 00:57:26 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 187520854, "id": 1375167145617850374, "text": "RT @PaulVermeersch: Hey everyone, this book by \n@toluini definitely looks like one to watch for this spring. Coming soon from @PalimpsestPr\u2026", "createdAt": 1616700371000} to the topic = twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Excited to share this item from my #etsy shop: Sunflower Long Welcome Sign with Faux Sunflower and Bow - Handmade #spring #summer #garden #sunflowrt #sunflowers #flowers #sunshine #shopsmall https://t.co/CTmCcpCmgw https://t.co/jeXxj47jbx , sending to Kafka topic twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1346616775996178433, "id": 1375167146817282057, "text": "Excited to share this item from my #etsy shop: Sunflower Long Welcome Sign with Faux Sunflower and Bow - Handmade #spring #summer #garden #sunflowrt #sunflowers #flowers #sunshine #shopsmall https://t.co/CTmCcpCmgw https://t.co/jeXxj47jbx", "createdAt": 1616700371000} to the topic = twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @minipuffins: 🌸🌙spring is coming🌙🌸

#문빈 #MOONBIN #ASTRO #아스트로 https://t.co/FbJeQqUcsU , sending to Kafka topic twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1026437949481672705, "id": 1375167148390113280, "text": "RT @minipuffins: 🌸🌙spring is coming🌙🌸\n\n#문빈 #MOONBIN #ASTRO #아스트로 https://t.co/FbJeQqUcsU", "createdAt": 1616700372000} to the topic = twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring Green 🌱 https://t.co/FzeCSKrJxM , sending to Kafka topic twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4908564674, "id": 1375167148977319938, "text": "Spring Green 🌱 https://t.co/FzeCSKrJxM", "createdAt": 1616700372000} to the topic = twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text this is the first year without a spring break and i am legit like https://t.co/FJlxIQcvWL , sending to Kafka topic twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 237529631, "id": 1375167149468082176, "text": "this is the first year without a spring break and i am legit like https://t.co/FJlxIQcvWL", "createdAt": 1616700372000} to the topic = twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MissingKids: Kristen was last seen on January 2, 2020 in Spring, #Texas. 
https://t.co/pL3c9zYmYY , sending to Kafka topic twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2987239118, "id": 1375167149740847111, "text": "RT @MissingKids: Kristen was last seen on January 2, 2020 in Spring, #Texas. \nhttps://t.co/pL3c9zYmYY", "createdAt": 1616700372000} to the topic = twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text No breaks. Full time in spring and summer. How does one cope? Hahaha 😬 , sending to Kafka topic twitter-topic
2021-03-26 00:57:27 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1343255128787144704, "id": 1375167150785110017, "text": "No breaks. Full time in spring and summer. How does one cope? Hahaha 😬", "createdAt": 1616700372000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text As part of our RE topic ‘Growing’ we have planted bulbs and seeds and looked for signs of hope, new life and Spring. #Easterjoy #newlife @StAnnesLiv https://t.co/EuJ4NM50Pv , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 827078169471623168, "id": 1375167150118305798, "text": "As part of our RE topic \u2018Growing\u2019 we have planted bulbs and seeds and looked for signs of hope, new life and Spring. #Easterjoy #newlife @StAnnesLiv https://t.co/EuJ4NM50Pv", "createdAt": 1616700372000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Vampiria502: Its the spring glow 🌻🐝 https://t.co/ic1hkMVEp8 , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1121212499452420096, "id": 1375167153276653571, "text": "RT @Vampiria502: Its the spring glow 🌻🐝 https://t.co/ic1hkMVEp8", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ECGrowProTurf: Combine your preemergent and grub control this spring to save time and money. #LEP #GrowWithLess
https://t.co/hATIF5ilQp… , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2892148235, "id": 1375167153981251598, "text": "RT @ECGrowProTurf: Combine your preemergent and grub control this spring to save time and money. #LEP #GrowWithLess\nhttps://t.co/hATIF5ilQp\u2026", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Kianna_Dior: new💥 Milf TitFuck JOI dm don’t miss out! click: https://t.co/1jBlgQ8k1g my new spring turtleneck sweater 💐👀 RT https://t.c… , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 100993014, "id": 1375167154031628289, "text": "RT @Kianna_Dior: new💥 Milf TitFuck JOI dm don\u2019t miss out! click: https://t.co/1jBlgQ8k1g my new spring turtleneck sweater 💐👀 RT https://t.c\u2026", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text GENTE POR FAVOR , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1300633615701872648, "id": 1375167154056757250, "text": "GENTE POR FAVOR", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text SPRING BREAK SPRING BREAK SPRING BREAK , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1301644590416646148, "id": 1375167154539147265, "text": "SPRING BREAK SPRING BREAK SPRING BREAK", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Join us for the @GirlsWhoCode Spring Forward event. We'll be doing a session on the "cosmic code" of your astrology chart! , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 24581297, "id": 1375167154316832774, "text": "Join us for the @GirlsWhoCode Spring Forward event. We'll be doing a session on the \"cosmic code\" of your astrology chart!", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text OKAY FIRST LISTEN 
coin > hi spring bye > empty cup > epilogue = troll = my sea > ah puh > flu , sending to Kafka topic twitter-topic
2021-03-26 00:57:28 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2224180624, "id": 1375167154811703301, "text": "OKAY FIRST LISTEN \ncoin > hi spring bye > empty cup > epilogue = troll = my sea > ah puh > flu", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text After missing 2020, Spring Sports are back! @CHS_Cavs Assistant Athletic Director @Kbonn3 talks with @litter_media about this Saturday's Fairweather Relays, the new Baseball Field at Mt. Logan and more! WATCH HERE: https://t.co/7znFRYLzsX https://t.co/8hf7ikOeje , sending to Kafka topic twitter-topic
2021-03-26 00:57:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 913131301082927104, "id": 1375167155818409989, "text": "After missing 2020, Spring Sports are back! @CHS_Cavs Assistant Athletic Director @Kbonn3 talks with @litter_media about this Saturday's Fairweather Relays, the new Baseball Field at Mt. Logan and more! WATCH HERE: https://t.co/7znFRYLzsX https://t.co/8hf7ikOeje", "createdAt": 1616700373000} to the topic = twitter-topic
2021-03-26 00:57:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @DanaWessel Green for spring. , sending to Kafka topic twitter-topic
2021-03-26 00:57:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 176218199, "id": 1375167158381117445, "text": "@DanaWessel Green for spring.", "createdAt": 1616700374000} to the topic = twitter-topic
2021-03-26 00:57:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text *Telialigaen 2021 Spring split, note: We won 7 matches I believe but 3 of the teams withdrew from the league. , sending to Kafka topic twitter-topic
2021-03-26 00:57:29 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 787524765909221376, "id": 1375167158762799114, "text": "*Telialigaen 2021 Spring split, note: We won 7 matches I believe but 3 of the teams withdrew from the league.", "createdAt": 1616700374000} to the topic = twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Theyre literally insane btw , sending to Kafka topic twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1076762266949824512, "id": 1375167160817975304, "text": "Theyre literally insane btw", "createdAt": 1616700375000} to the topic = twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @acupofjo_sie: Got my hairs cutted!

I’m gonna go even slightly shorter next time but this was a big change for me. 

Perfect for spring… , sending to Kafka topic twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1357117096430358528, "id": 1375167162055331846, "text": "RT @acupofjo_sie: Got my hairs cutted!\n\nI\u2019m gonna go even slightly shorter next time but this was a big change for me. \n\nPerfect for spring\u2026", "createdAt": 1616700375000} to the topic = twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text V
Accused Spring Break rapists photographed partying in Miami after alleged assault
======

https://t.co/NkUfYOUu2I https://t.co/8Ie1h4Dltl , sending to Kafka topic twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 964770359814868992, "id": 1375167162420236293, "text": "V\nAccused Spring Break rapists photographed partying in Miami after alleged assault\n======\n\nhttps://t.co/NkUfYOUu2I https://t.co/8Ie1h4Dltl", "createdAt": 1616700375000} to the topic = twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @DailyRoyaleHigh SPRING 2020 , sending to Kafka topic twitter-topic
2021-03-26 00:57:30 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1371613166191394817, "id": 1375167163049381895, "text": "@DailyRoyaleHigh SPRING 2020", "createdAt": 1616700375000} to the topic = twitter-topic
2021-03-26 00:57:31 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @pepsi What better spring activity than studying for a final exam @pepsi  #HangingWithMyPeeps #PepsiSweepstakes https://t.co/h0yzzpDEOr , sending to Kafka topic twitter-topic
2021-03-26 00:57:31 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3345773961, "id": 1375167163477200901, "text": "@pepsi What better spring activity than studying for a final exam @pepsi  #HangingWithMyPeeps #PepsiSweepstakes https://t.co/h0yzzpDEOr", "createdAt": 1616700375000} to the topic = twitter-topic
2021-03-26 00:57:31 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @NeelEva1: A nice surprise to meet this mother duck and her cubs on the first day of spring :)
 Photo taken on the banks of the Seine be… , sending to Kafka topic twitter-topic
2021-03-26 00:57:31 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 896991987722706944, "id": 1375167165083443205, "text": "RT @NeelEva1: A nice surprise to meet this mother duck and her cubs on the first day of spring :)\n Photo taken on the banks of the Seine be\u2026", "createdAt": 1616700376000} to the topic = twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @inkanii: Spring Petra 🥕
#FE3H https://t.co/BH2Yu6MK28 , sending to Kafka topic twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1102695018932961280, "id": 1375167168002809860, "text": "RT @inkanii: Spring Petra 🥕\n#FE3H https://t.co/BH2Yu6MK28", "createdAt": 1616700376000} to the topic = twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text I love watching HRs from this spring Training Camera Angle , sending to Kafka topic twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 898021164, "id": 1375167169932226565, "text": "I love watching HRs from this spring Training Camera Angle", "createdAt": 1616700377000} to the topic = twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @petranaxox: It’s officially Spring! ☀️
Who remembers and loves this watermelon theme day?

More on my paid site💖

🍉Throwback Thursday🍉… , sending to Kafka topic twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1306671801204760576, "id": 1375167170615726080, "text": "RT @petranaxox: It\u2019s officially Spring! ☀️\nWho remembers and loves this watermelon theme day?\n\nMore on my paid site💖\n\n🍉Throwback Thursday🍉\u2026", "createdAt": 1616700377000} to the topic = twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text 🤍💎✨ evening walks 💎🤍 #Nature #Blossoms #Spring #Gratitude https://t.co/idO37GtAci , sending to Kafka topic twitter-topic
2021-03-26 00:57:32 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 387629681, "id": 1375167169542127616, "text": "🤍💎✨ evening walks 💎🤍 #Nature #Blossoms #Spring #Gratitude https://t.co/idO37GtAci", "createdAt": 1616700377000} to the topic = twitter-topic
2021-03-26 00:57:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @archivedlooks: Spring dresses https://t.co/IBV2wczO5C , sending to Kafka topic twitter-topic
2021-03-26 00:57:33 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1267987040890732546, "id": 1375167173430288387, "text": "RT @archivedlooks: Spring dresses https://t.co/IBV2wczO5C", "createdAt": 1616700378000} to the topic = twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @7fever_TOO_you: @mollajoon 👍yes indeed also reminds me of spring day with this pic (attached to the twt)-> for jhope when he’s on the t… , sending to Kafka topic twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1075773362897592320, "id": 1375167176575967238, "text": "RT @7fever_TOO_you: @mollajoon 👍yes indeed also reminds me of spring day with this pic (attached to the twt)-> for jhope when he\u2019s on the t\u2026", "createdAt": 1616700378000} to the topic = twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @veganuary: The wonderful variety of delicious #vegan chocolates, recipes and treats means that we can enjoy this time of year even more… , sending to Kafka topic twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1413924002, "id": 1375167176504672266, "text": "RT @veganuary: The wonderful variety of delicious #vegan chocolates, recipes and treats means that we can enjoy this time of year even more\u2026", "createdAt": 1616700378000} to the topic = twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Shonzza: Yea I’m wyyyyylllliiiiiiiiiinnnnnn 
You already knoooooooooooooooowwwww https://t.co/1Jif3W1Rjz , sending to Kafka topic twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 536955989, "id": 1375167177632837637, "text": "RT @Shonzza: Yea I\u2019m wyyyyylllliiiiiiiiiinnnnnn \nYou already knoooooooooooooooowwwww https://t.co/1Jif3W1Rjz", "createdAt": 1616700379000} to the topic = twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @KnoxPrairieFire: Knox Releases Outdoor Spectator Policy for Spring 2021 https://t.co/KIh0hAoOjp , sending to Kafka topic twitter-topic
2021-03-26 00:57:34 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 705472683417276416, "id": 1375167177897213953, "text": "RT @KnoxPrairieFire: Knox Releases Outdoor Spectator Policy for Spring 2021 https://t.co/KIh0hAoOjp", "createdAt": 1616700379000} to the topic = twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ddckaylee: Spring into the new season with some cute and quirky designs from my shop!

All 20% off with free US shipping too!

https://… , sending to Kafka topic twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1351365346737889281, "id": 1375167181411905538, "text": "RT @ddckaylee: Spring into the new season with some cute and quirky designs from my shop!\n\nAll 20% off with free US shipping too!\n\nhttps://\u2026", "createdAt": 1616700380000} to the topic = twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Steph_Panisello: The Future Games Show Spring Showcase is here! Come join me today @2:45 PST, as I host the Pre-Show to kick things off… , sending to Kafka topic twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 39709624, "id": 1375167182125076483, "text": "RT @Steph_Panisello: The Future Games Show Spring Showcase is here! Come join me today @2:45 PST, as I host the Pre-Show to kick things off\u2026", "createdAt": 1616700380000} to the topic = twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Aki_Aint_It: Adoptable Bid!
.
.
.
I'm selling this character for robux, diamonds or halos. You decide gender, age etc.
.
.
.
Starting b… , sending to Kafka topic twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1233824644697907200, "id": 1375167183056175108, "text": "RT @Aki_Aint_It: Adoptable Bid!\n.\n.\n.\nI'm selling this character for robux, diamonds or halos. You decide gender, age etc.\n.\n.\n.\nStarting b\u2026", "createdAt": 1616700380000} to the topic = twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CalonNatur: A bit of spring joy, hope, new beginnings.
Something we all need at the moment.
#NewBeginings 
#loveofnature #photography #… , sending to Kafka topic twitter-topic
2021-03-26 00:57:35 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1369012074572099585, "id": 1375167182951354372, "text": "RT @CalonNatur: A bit of spring joy, hope, new beginnings.\nSomething we all need at the moment.\n#NewBeginings \n#loveofnature #photography #\u2026", "createdAt": 1616700380000} to the topic = twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Really excellent piece by @HKaaman that focuses on several rebel groups' use of SVBIEDs during the spring 2015 offensives that captured Idlib, Jisr al-Shughour and Ariha, but is also an incredibly detailed accounting of how the offensive played out https://t.co/KP8sbE6Q1M , sending to Kafka topic twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2420016318, "id": 1375167185144926209, "text": "Really excellent piece by @HKaaman that focuses on several rebel groups' use of SVBIEDs during the spring 2015 offensives that captured Idlib, Jisr al-Shughour and Ariha, but is also an incredibly detailed accounting of how the offensive played out https://t.co/KP8sbE6Q1M", "createdAt": 1616700380000} to the topic = twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ReadingGuide: SHOPPERTUNITY! Step into Spring - and along the beach - in one of the many classic styles at Crocs. Click >https://t.co/n… , sending to Kafka topic twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 105772478, "id": 1375167185530855430, "text": "RT @ReadingGuide: SHOPPERTUNITY! Step into Spring - and along the beach - in one of the many classic styles at Crocs. Click >https://t.co/n\u2026", "createdAt": 1616700381000} to the topic = twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text cabbage spring rolls

or

sweet potato dumplings? https://t.co/Kme5nvQtBJ , sending to Kafka topic twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1318580885680279557, "id": 1375167185644105738, "text": "cabbage spring rolls\n\nor\n\nsweet potato dumplings? https://t.co/Kme5nvQtBJ", "createdAt": 1616700381000} to the topic = twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Our Family Business is sponsoring  “Game Changer” Attn Coaches - Nominate your Spring Football
#NGE #Gamechanger of the week. 
Sponsored by SmashIt2 in Worcester, MA

✅Invitation to end of season party at @Smashit2 

Nominations can be submitted here: https://t.co/o0tD0OnoDQ https://t.co/LKJziHXVGs , sending to Kafka topic twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1258186829070770176, "id": 1375167185300111365, "text": "Our Family Business is sponsoring  \u201CGame Changer\u201D Attn Coaches - Nominate your Spring Football\n#NGE #Gamechanger of the week. \nSponsored by SmashIt2 in Worcester, MA\n\n✅Invitation to end of season party at @Smashit2 \n\nNominations can be submitted here: https://t.co/o0tD0OnoDQ https://t.co/LKJziHXVGs", "createdAt": 1616700381000} to the topic = twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @badgerband: Yesterday we may have been split into two groups of 100+ but you wouldn’t have known it from the way we sounded. 

With the… , sending to Kafka topic twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 47977718, "id": 1375167186818465793, "text": "RT @badgerband: Yesterday we may have been split into two groups of 100+ but you wouldn\u2019t have known it from the way we sounded. \n\nWith the\u2026", "createdAt": 1616700381000} to the topic = twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text This remember me my grandma singing nct songs 🥺 , sending to Kafka topic twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 385041469, "id": 1375167188030660611, "text": "This remember me my grandma singing nct songs 🥺", "createdAt": 1616700381000} to the topic = twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @StribSports: "No job will be won in the spring, I will say that."

Turning around last year's 3-4 #Gophers football team began, in earn… , sending to Kafka topic twitter-topic
2021-03-26 00:57:36 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1641435295, "id": 1375167188148101123, "text": "RT @StribSports: \"No job will be won in the spring, I will say that.\"\n\nTurning around last year's 3-4 #Gophers football team began, in earn\u2026", "createdAt": 1616700381000} to the topic = twitter-topic
2021-03-26 00:57:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @QueenofCr8tvty: Spent today spring cleaning my studio. Yay for me! https://t.co/UfTz7LYbM8 , sending to Kafka topic twitter-topic
2021-03-26 00:57:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1319987990442233857, "id": 1375167190459105281, "text": "RT @QueenofCr8tvty: Spent today spring cleaning my studio. Yay for me! https://t.co/UfTz7LYbM8", "createdAt": 1616700382000} to the topic = twitter-topic
2021-03-26 00:57:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @liesntruth1026: OP's 84-year-old mother watched Yuta on a Japanese TV show and then she is highly praising Yuta. OP said OP wasn't fami… , sending to Kafka topic twitter-topic
2021-03-26 00:57:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 385041469, "id": 1375167190819860480, "text": "RT @liesntruth1026: OP's 84-year-old mother watched Yuta on a Japanese TV show and then she is highly praising Yuta. OP said OP wasn't fami\u2026", "createdAt": 1616700382000} to the topic = twitter-topic
2021-03-26 00:57:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @blank_keyrings: Want to win £100 to spend on our website?

Check out our #competition to celebrate springtime and the easing of restric… , sending to Kafka topic twitter-topic
2021-03-26 00:57:37 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4705502727, "id": 1375167192161980418, "text": "RT @blank_keyrings: Want to win £100 to spend on our website?\n\nCheck out our #competition to celebrate springtime and the easing of restric\u2026", "createdAt": 1616700382000} to the topic = twitter-topic
2021-03-26 00:57:37 [SpringContextShutdownHook] INFO  c.t.t.runner.impl.StreamRunnerImpl - TwitterStream is not null, closing it
2021-03-26 00:57:37 [SpringContextShutdownHook] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 00:57:37 [SpringContextShutdownHook] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2021-03-26 22:43:43 [main] INFO  c.t.t.TwittertoKafkaApplication - Starting TwittertoKafkaApplication using Java 1.8.0_271 on sameer-hppavilionnotebook with PID 18444 (/home/svogeti/Documents/analytics-master/twitter-to-kafka-service/target/classes started by svogeti in /home/svogeti/Documents/analytics-master)
2021-03-26 22:43:43 [main] INFO  c.t.t.TwittertoKafkaApplication - No active profile set, falling back to default profiles: default
2021-03-26 22:43:44 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2021-03-26 22:43:44 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 22:43:44 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 22:43:44 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616778824988
2021-03-26 22:43:45 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2021-03-26 22:43:45 [main] INFO  c.t.t.TwittertoKafkaApplication - Started TwittertoKafkaApplication in 3.208 seconds (JVM running for 4.299)
2021-03-26 22:43:45 [main] INFO  c.t.t.TwittertoKafkaApplication - App Starts
2021-03-26 22:43:45 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Creating 1 topics(s), attempt 0
2021-03-26 22:43:45 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Create topic result [KafkaFuture{value=null,exception=null,done=false}]
2021-03-26 22:43:45 [main] INFO  c.t.k.admin.client.KafkaAdminClient - Reading kafka topic [twitter-topic], attempt 0
2021-03-26 22:43:46 [main] INFO  c.t.t.i.impl.KafkaStreamInitializer - Topics with names twitter-topic is ready for operations
2021-03-26 22:43:46 [main] INFO  c.t.t.runner.impl.StreamRunnerImpl - Started filtering twitter Stream for keywords [Java, MicroServices, Spring, Kafka, ElasticSearch]
2021-03-26 22:43:46 [Twitter Stream consumer /  [1][initializing]] INFO  twitter4j.TwitterStreamImpl - Establishing connection.
2021-03-26 22:43:48 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Connection established.
2021-03-26 22:43:48 [Twitter Stream consumer /  [1][Establishing connection]] INFO  twitter4j.TwitterStreamImpl - Receiving status stream.
2021-03-26 22:43:48 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Newsarama: Every announcement during the Future Games Show: Spring Showcase https://t.co/9kh2zsGW18 https://t.co/RBEUsvd5FQ , sending to Kafka topic twitter-topic
2021-03-26 22:43:48 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3844071499, "id": 1375495890044080128, "text": "RT @Newsarama: Every announcement during the Future Games Show: Spring Showcase https://t.co/9kh2zsGW18 https://t.co/RBEUsvd5FQ", "createdAt": 1616778750000} to the topic = twitter-topic
2021-03-26 22:43:48 [Twitter4J Async Dispatcher[0]] INFO  o.a.k.c.producer.ProducerConfig - ProducerConfig values: 
	acks = -1
	batch.size = 1638400
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	internal.auto.downgrade.txn.commit = true
	key.serializer = class org.apache.kafka.common.serialization.LongSerializer
	linger.ms = 5
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 60000
	retries = 5
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer

2021-03-26 22:43:48 [Twitter4J Async Dispatcher[0]] INFO  i.c.k.s.KafkaAvroSerializerConfig - KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	proxy.port = -1
	schema.reflection = false
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	proxy.host = 
	use.latest.version = false
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy

2021-03-26 22:43:48 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 2.6.0
2021-03-26 22:43:48 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 62abe01bee039651
2021-03-26 22:43:48 [Twitter4J Async Dispatcher[0]] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1616778828669
2021-03-26 22:43:48 [kafka-producer-network-thread | producer-1] INFO  org.apache.kafka.clients.Metadata - [Producer clientId=producer-1] Cluster ID: JkTzODdTTHC3ZMdoUR7BJQ
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @byNathanKing: Harsin holding #Auburn quarterbacks to high standard in spring practice https://t.co/8Lp3OW1pee , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 20274544, "id": 1375495890564169729, "text": "RT @byNathanKing: Harsin holding #Auburn quarterbacks to high standard in spring practice https://t.co/8Lp3OW1pee", "createdAt": 1616778750000} to the topic = twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text När demonerna kommer så spring mot dem. De kommer flytta på sig. , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1374054804880756738, "id": 1375495891931512834, "text": "När demonerna kommer så spring mot dem. De kommer flytta på sig.", "createdAt": 1616778750000} to the topic = twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Rhiannashop13: 2 pesos gcash !!!

PAKI PALIWANAG SAKIN YUNG  SPRING DAY

LIKE & RT , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1349627578869374982, "id": 1375495892535439360, "text": "RT @Rhiannashop13: 2 pesos gcash !!!\n\nPAKI PALIWANAG SAKIN YUNG  SPRING DAY\n\nLIKE & RT", "createdAt": 1616778750000} to the topic = twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Scullys_Stuff: These Spring Rose Earrings are a beautiful addition to any outfit! 💐 https://t.co/nhOen52MdW , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1292915515497893889, "id": 1375495892782944256, "text": "RT @Scullys_Stuff: These Spring Rose Earrings are a beautiful addition to any outfit! 💐 https://t.co/nhOen52MdW", "createdAt": 1616778750000} to the topic = twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @autumndiors: loving spring colors https://t.co/3vi7zk4mgh , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1300132685755510784, "id": 1375495892728430604, "text": "RT @autumndiors: loving spring colors https://t.co/3vi7zk4mgh", "createdAt": 1616778750000} to the topic = twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @MishapCultural: GOOD MORNING MY PEOPLE. TODAY IS A WONDERFUL DAY.
JUJUTSU KAISEN FRIDAY? LOVE THAT
FIRST DAY OF SPRING BREAK? ALSO LOVE… , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1285357895480033280, "id": 1375495892883546116, "text": "RT @MishapCultural: GOOD MORNING MY PEOPLE. TODAY IS A WONDERFUL DAY.\nJUJUTSU KAISEN FRIDAY? LOVE THAT\nFIRST DAY OF SPRING BREAK? ALSO LOVE\u2026", "createdAt": 1616778750000} to the topic = twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Blossom_Aeri: 🌸 ¡Aeris! La segunda actividad del proyecto 'Spring Xiu Day' ya está lista. 💖

Muchas gracias a todas las que participaro… , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1253021292, "id": 1375495893508632577, "text": "RT @Blossom_Aeri: 🌸 ¡Aeris! La segunda actividad del proyecto 'Spring Xiu Day' ya está lista. 💖\n\nMuchas gracias a todas las que participaro\u2026", "createdAt": 1616778751000} to the topic = twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CoachJoeDuPaix: #LetsGo ⚓️ , sending to Kafka topic twitter-topic
2021-03-26 22:43:49 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 753038110431252480, "id": 1375495896385921027, "text": "RT @CoachJoeDuPaix: #LetsGo ⚓️", "createdAt": 1616778751000} to the topic = twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring has definitely sprung @leedscastleuk. We enjoyed warm donuts, a hot drink and a two mile walk. #walk1000miles #exercise #spring #local https://t.co/Chnlscorsb , sending to Kafka topic twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1292445979, "id": 1375495895475687425, "text": "Spring has definitely sprung @leedscastleuk. We enjoyed warm donuts, a hot drink and a two mile walk. #walk1000miles #exercise #spring #local https://t.co/Chnlscorsb", "createdAt": 1616778751000} to the topic = twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text SAC mocks the memory of the fallen in the spring revolution.

Military admittedly stated shots were intentional and aimed at back and heads.

The whole statement summarizes into putting fear into people brains, 

#WhatsHappeningInMyanmar , sending to Kafka topic twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2218775833, "id": 1375495897149136898, "text": "SAC mocks the memory of the fallen in the spring revolution.\n\nMilitary admittedly stated shots were intentional and aimed at back and heads.\n\nThe whole statement summarizes into putting fear into people brains, \n\n#WhatsHappeningInMyanmar", "createdAt": 1616778752000} to the topic = twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text For #frenchfriday today we learned an Easter/Spring themed song which involved us being chickens in our nests and flapping our wings! P2 thought it was very silly and really enjoyed it! 🐔 🇫🇷 @aroblingo @RoslinPS https://t.co/4Xx3jXOJRR , sending to Kafka topic twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 976937261550985216, "id": 1375495896692092932, "text": "For #frenchfriday today we learned an Easter/Spring themed song which involved us being chickens in our nests and flapping our wings! P2 thought it was very silly and really enjoyed it! 🐔 🇫🇷 @aroblingo @RoslinPS https://t.co/4Xx3jXOJRR", "createdAt": 1616778751000} to the topic = twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @AlexFast8: Robbie Grossman's 3rd HR of the spring was a monster shot https://t.co/FiCm2awEQI , sending to Kafka topic twitter-topic
2021-03-26 22:43:50 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 43425067, "id": 1375495900416536577, "text": "RT @AlexFast8: Robbie Grossman's 3rd HR of the spring was a monster shot https://t.co/FiCm2awEQI", "createdAt": 1616778752000} to the topic = twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @mountful: Have continued to involve in the production of "Attack on Titan." And I will also participate in "The Ancient Magus Bride" as… , sending to Kafka topic twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2489551860, "id": 1375495900953518080, "text": "RT @mountful: Have continued to involve in the production of \"Attack on Titan.\" And I will also participate in \"The Ancient Magus Bride\" as\u2026", "createdAt": 1616778752000} to the topic = twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Ethan_Pr1: RT if I can use your holes? 

Spring sale - 40% off - link in bio 💐 https://t.co/32eXTBVjW8 , sending to Kafka topic twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1210363543993929730, "id": 1375495901079289860, "text": "RT @Ethan_Pr1: RT if I can use your holes? \n\nSpring sale - 40% off - link in bio 💐 https://t.co/32eXTBVjW8", "createdAt": 1616778752000} to the topic = twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @maxfawcett: 😑 https://t.co/UNp2vCoOhH , sending to Kafka topic twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 140568823, "id": 1375495901238624259, "text": "RT @maxfawcett: 😑 https://t.co/UNp2vCoOhH", "createdAt": 1616778752000} to the topic = twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @1991HAPPILY: STOP. TRAVELING. TO. FLORIDA. FOR. SPRING. BREAK. WE. ARE. IN. A. PANDEMIC. , sending to Kafka topic twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1331094100486057989, "id": 1375495902236962819, "text": "RT @1991HAPPILY: STOP. TRAVELING. TO. FLORIDA. FOR. SPRING. BREAK. WE. ARE. IN. A. PANDEMIC.", "createdAt": 1616778753000} to the topic = twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @zukababystore: Rain or shine, our cuddly new friends are sure to bring springtime snuggles and smiles!
Stop by the store to meet them,… , sending to Kafka topic twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 965031554509664259, "id": 1375495903138709505, "text": "RT @zukababystore: Rain or shine, our cuddly new friends are sure to bring springtime snuggles and smiles!\nStop by the store to meet them,\u2026", "createdAt": 1616778753000} to the topic = twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @dahalapenio: #Lilies & #Tulips The beauty of #Spring 🌸💐🌺🌷... Sharing love, Beauty & Hope to all my FRIENDS/AMIGOS all around the world… , sending to Kafka topic twitter-topic
2021-03-26 22:43:51 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1002200686476619776, "id": 1375495903679762436, "text": "RT @dahalapenio: #Lilies & #Tulips The beauty of #Spring 🌸💐🌺🌷... Sharing love, Beauty & Hope to all my FRIENDS/AMIGOS all around the world\u2026", "createdAt": 1616778753000} to the topic = twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @IUmushimushi: IU Comeback Stage - EPILOGUE

GODDESS OF SPRING IU
@_IUofficial
#IUonMusicBank #VamosCoin
#IU #아이유 https://t.co/GkEDUIoHci , sending to Kafka topic twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1349918855783563264, "id": 1375495906800197648, "text": "RT @IUmushimushi: IU Comeback Stage - EPILOGUE\n\nGODDESS OF SPRING IU\n@_IUofficial\n#IUonMusicBank #VamosCoin\n#IU #아이유 https://t.co/GkEDUIoHci", "createdAt": 1616778754000} to the topic = twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Rhiannashop13: 2 pesos gcash !!!

PAKI PALIWANAG SAKIN YUNG  SPRING DAY

LIKE & RT , sending to Kafka topic twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1334532930404663296, "id": 1375495907177721856, "text": "RT @Rhiannashop13: 2 pesos gcash !!!\n\nPAKI PALIWANAG SAKIN YUNG  SPRING DAY\n\nLIKE & RT", "createdAt": 1616778754000} to the topic = twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @manjyuya100: Spring 🚲🌸🍃 https://t.co/KLV0Sze6s0 , sending to Kafka topic twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1350691940593971200, "id": 1375495907182059523, "text": "RT @manjyuya100: Spring 🚲🌸🍃 https://t.co/KLV0Sze6s0", "createdAt": 1616778754000} to the topic = twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @PrincessChurr_O @EthosThreads i had a bad experience with the merch i got thru them... it was poor quality... i think @Reziichu  had good luck with tee spring and i LOVE my shirt from them its held up really well , sending to Kafka topic twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 55266234, "id": 1375495907186245633, "text": "@PrincessChurr_O @EthosThreads i had a bad experience with the merch i got thru them... it was poor quality... i think @Reziichu  had good luck with tee spring and i LOVE my shirt from them its held up really well", "createdAt": 1616778754000} to the topic = twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CORSAIR: Not enough games in your backlog? 👀

We're giving away 3x packs of 20 games to celebrate the @GOGcom Spring Sale!!

To enter:… , sending to Kafka topic twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 771054806131671040, "id": 1375495907446243331, "text": "RT @CORSAIR: Not enough games in your backlog? 👀\n\nWe're giving away 3x packs of 20 games to celebrate the @GOGcom Spring Sale!!\n\nTo enter:\u2026", "createdAt": 1616778754000} to the topic = twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @AmitAryaMD: With Passover, Easter & Spring Break on the horizon...Ontario has surging ICU admissions, a majority of cases caused by var… , sending to Kafka topic twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1117035592565628928, "id": 1375495908897480727, "text": "RT @AmitAryaMD: With Passover, Easter & Spring Break on the horizon...Ontario has surging ICU admissions, a majority of cases caused by var\u2026", "createdAt": 1616778754000} to the topic = twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Challenger_ST: As spring sport seasons start, here are some guidelines for athletes who may be given poor info from sport coaches

1. H… , sending to Kafka topic twitter-topic
2021-03-26 22:43:52 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1154011389083578368, "id": 1375495909245607938, "text": "RT @Challenger_ST: As spring sport seasons start, here are some guidelines for athletes who may be given poor info from sport coaches\n\n1. H\u2026", "createdAt": 1616778754000} to the topic = twitter-topic
2021-03-26 22:43:53 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text We not seeing that shit till spring 2023 , sending to Kafka topic twitter-topic
2021-03-26 22:43:53 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1267009484481847297, "id": 1375495909706854404, "text": "We not seeing that shit till spring 2023", "createdAt": 1616778755000} to the topic = twitter-topic
2021-03-26 22:43:53 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SethWEmerson: Georgia tight end John FitzPatrick discussing spring practice and then will deal with any shenanigans from Lex Luthor. ht… , sending to Kafka topic twitter-topic
2021-03-26 22:43:53 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1356351672134602756, "id": 1375495909686050823, "text": "RT @SethWEmerson: Georgia tight end John FitzPatrick discussing spring practice and then will deal with any shenanigans from Lex Luthor. ht\u2026", "createdAt": 1616778755000} to the topic = twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @RitaPanahi: Absolutely pathetic. Police watch on as protesters break the law but spring into action when a fed up motorist removes a ba… , sending to Kafka topic twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4440232705, "id": 1375495913712406528, "text": "RT @RitaPanahi: Absolutely pathetic. Police watch on as protesters break the law but spring into action when a fed up motorist removes a ba\u2026", "createdAt": 1616778755000} to the topic = twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @modollass: Spring is here!🌞 Come get some shades while they are $5 💓Headbands are $8 2 for $14 Mokouture on Ig🔥 https://t.co/aTvCYVulfT , sending to Kafka topic twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1238600496182710272, "id": 1375495914245120008, "text": "RT @modollass: Spring is here!🌞 Come get some shades while they are $5 💓Headbands are $8 2 for $14 Mokouture on Ig🔥 https://t.co/aTvCYVulfT", "createdAt": 1616778756000} to the topic = twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Visit_Japan: In Japan, the cherry blossoms have bloomed earlier than usual this year 🌸 Please share your best cherry blossom views from… , sending to Kafka topic twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 50932148, "id": 1375495915436445696, "text": "RT @Visit_Japan: In Japan, the cherry blossoms have bloomed earlier than usual this year 🌸 Please share your best cherry blossom views from\u2026", "createdAt": 1616778756000} to the topic = twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @HyannaNatsu: Day 5 - The Librarian 🔖
https://t.co/Xxgi6b82CO https://t.co/1nUcgHg3PT , sending to Kafka topic twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1325557128522772480, "id": 1375495916199759885, "text": "RT @HyannaNatsu: Day 5 - The Librarian 🔖\nhttps://t.co/Xxgi6b82CO https://t.co/1nUcgHg3PT", "createdAt": 1616778756000} to the topic = twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text "Formas parte de mí, aunque no vuelva a verte nunca". 

— Franz Kafka | Cartas a Milena. , sending to Kafka topic twitter-topic
2021-03-26 22:43:54 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 448483768, "id": 1375495917030285316, "text": "\"Formas parte de mí, aunque no vuelva a verte nunca\". \n\n\u2014 Franz Kafka | Cartas a Milena.", "createdAt": 1616778756000} to the topic = twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Done! Stop by our Lift table for some swag! , sending to Kafka topic twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1656085933, "id": 1375495918003310595, "text": "Done! Stop by our Lift table for some swag!", "createdAt": 1616778756000} to the topic = twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text literally f my school for not giving us a spring break i’m so mentally drained hahahaha , sending to Kafka topic twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 880982290351968256, "id": 1375495918200487939, "text": "literally f my school for not giving us a spring break i\u2019m so mentally drained hahahaha", "createdAt": 1616778757000} to the topic = twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Hille_Huskies starting our second round of our all school Bingo before we leave for #springbreak2021. Thank you to @AP_Nagle and @JulieNolanRyan for putting this event together! #hillehuskies #engage142 #huskiepride💙 Stay safe and enjoy your spring break students!☀️🐰🕶️💐⚾️🐣 https://t.co/LotTzINOKc , sending to Kafka topic twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 60421744, "id": 1375495917424545799, "text": "@Hille_Huskies starting our second round of our all school Bingo before we leave for #springbreak2021. Thank you to @AP_Nagle and @JulieNolanRyan for putting this event together! #hillehuskies #engage142 #huskiepride💙 Stay safe and enjoy your spring break students!☀️🐰🕶️💐⚾️🐣 https://t.co/LotTzINOKc", "createdAt": 1616778756000} to the topic = twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Cam4: The WILDLY popular Happy Hour starts TODAY at 4PM!🍾 Join our stunning host @lauraxdesiree with producer @busymantm for our GIRLS… , sending to Kafka topic twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1091353556832174080, "id": 1375495919353860098, "text": "RT @Cam4: The WILDLY popular Happy Hour starts TODAY at 4PM!🍾 Join our stunning host @lauraxdesiree with producer @busymantm for our GIRLS\u2026", "createdAt": 1616778757000} to the topic = twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text What!? Cafe @LCPS_Academies is blowing my mind w/ this fruit flavored mash-up right before spring break. @LCPSCafe @OceanSprayInc https://t.co/O2AwYrVbGC , sending to Kafka topic twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1353324907, "id": 1375495918909337602, "text": "What!? Cafe @LCPS_Academies is blowing my mind w/ this fruit flavored mash-up right before spring break. @LCPSCafe @OceanSprayInc https://t.co/O2AwYrVbGC", "createdAt": 1616778757000} to the topic = twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @mspoweruser: The Epic Games Store Spring Sale has begun - https://t.co/RFB8IOE085 https://t.co/KW8rTFvjiB , sending to Kafka topic twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 23033496, "id": 1375495920704491538, "text": "RT @mspoweruser: The Epic Games Store Spring Sale has begun - https://t.co/RFB8IOE085 https://t.co/KW8rTFvjiB", "createdAt": 1616778757000} to the topic = twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @simondawson75 I had peppers carrot spring onion and rocket , sending to Kafka topic twitter-topic
2021-03-26 22:43:55 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 133249083, "id": 1375495920893169667, "text": "@simondawson75 I had peppers carrot spring onion and rocket", "createdAt": 1616778757000} to the topic = twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CYJPRlNT: they look like a couple in a spring date https://t.co/tz4o3VEMVg , sending to Kafka topic twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1344474653486579712, "id": 1375495922440806400, "text": "RT @CYJPRlNT: they look like a couple in a spring date https://t.co/tz4o3VEMVg", "createdAt": 1616778758000} to the topic = twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @LunaAmofficial1: The spring it's coming⚘⚘🌺🌺
Can I be your fairy??🧚‍♀️🧚‍♀️💞💞 https://t.co/NQLA9ApWNX , sending to Kafka topic twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1193794651922132992, "id": 1375495922717626368, "text": "RT @LunaAmofficial1: The spring it's coming⚘⚘🌺🌺\nCan I be your fairy??🧚\u200D♀️🧚\u200D♀️💞💞 https://t.co/NQLA9ApWNX", "createdAt": 1616778758000} to the topic = twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text THIS YEAR WINTER!!??? YO GIVE US SEASON 2 NEXT SPRING https://t.co/UqG0jV6NhY , sending to Kafka topic twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4640147244, "id": 1375495922755411969, "text": "THIS YEAR WINTER!!??? YO GIVE US SEASON 2 NEXT SPRING https://t.co/UqG0jV6NhY", "createdAt": 1616778758000} to the topic = twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text 🌳NEW BLOG: From replanting oleander shrubs to breaking ground on a new pool, spring has arrived and brings with it some questions to be answered. #SpottedDog

READ --> https://t.co/6Yl0NdeOca

#architecture #PoolParty #landscapephotography https://t.co/MbIMEAi06p , sending to Kafka topic twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 748264973487378433, "id": 1375495922537336833, "text": "🌳NEW BLOG: From replanting oleander shrubs to breaking ground on a new pool, spring has arrived and brings with it some questions to be answered. #SpottedDog\n\nREAD --> https://t.co/6Yl0NdeOca\n\n#architecture #PoolParty #landscapephotography https://t.co/MbIMEAi06p", "createdAt": 1616778758000} to the topic = twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Rhiannashop13: 2 pesos gcash !!!

PAKI PALIWANAG SAKIN YUNG  SPRING DAY

LIKE & RT , sending to Kafka topic twitter-topic
2021-03-26 22:43:56 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1322380005771341829, "id": 1375495923858468865, "text": "RT @Rhiannashop13: 2 pesos gcash !!!\n\nPAKI PALIWANAG SAKIN YUNG  SPRING DAY\n\nLIKE & RT", "createdAt": 1616778758000} to the topic = twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @Chas_Battery @MNUFC @robbiedcrawford @GeobelJrs @shutouts20 @MauroC014 @USLChampionship Maybe no snow but they'll be several million Spring Breakers out in force..... , sending to Kafka topic twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 706139356445220864, "id": 1375495926094135296, "text": "@Chas_Battery @MNUFC @robbiedcrawford @GeobelJrs @shutouts20 @MauroC014 @USLChampionship Maybe no snow but they'll be several million Spring Breakers out in force.....", "createdAt": 1616778758000} to the topic = twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ScotLouie: spring is here girlies 
drop the top, open the sunroof, let’s ride https://t.co/DAdidt13By , sending to Kafka topic twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 44782768, "id": 1375495926505205760, "text": "RT @ScotLouie: spring is here girlies \ndrop the top, open the sunroof, let\u2019s ride https://t.co/DAdidt13By", "createdAt": 1616778759000} to the topic = twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @bardenmusic: Great songs and a great premiere project @FridayPMs Can’t wait for all the songs to be released on the website later this… , sending to Kafka topic twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 552820650, "id": 1375495926974967810, "text": "RT @bardenmusic: Great songs and a great premiere project @FridayPMs Can\u2019t wait for all the songs to be released on the website later this\u2026", "createdAt": 1616778759000} to the topic = twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @HailVarsity: Fred Hoiberg made his first transfer addition of the spring on Friday as former Xavier guard C.J. Wilcher announced his co… , sending to Kafka topic twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 593208192, "id": 1375495928073834504, "text": "RT @HailVarsity: Fred Hoiberg made his first transfer addition of the spring on Friday as former Xavier guard C.J. Wilcher announced his co\u2026", "createdAt": 1616778759000} to the topic = twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @JCJetsBaseball: Congrats to @nguyse2 on being named @aldotcomPreps player of the week in Alabama

https://t.co/PBpDOPDpwB , sending to Kafka topic twitter-topic
2021-03-26 22:43:57 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 139400420, "id": 1375495928715567105, "text": "RT @JCJetsBaseball: Congrats to @nguyse2 on being named @aldotcomPreps player of the week in Alabama\n\nhttps://t.co/PBpDOPDpwB", "createdAt": 1616778759000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SaraJayXXX: It’s spring ☀️ and look who’s blooming 🚀 show your partner what you working with!  Use code STIM40 @vigorlabs to get 40% OF… , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1127046781433458688, "id": 1375495930301022219, "text": "RT @SaraJayXXX: It\u2019s spring ☀️ and look who\u2019s blooming 🚀 show your partner what you working with!  Use code STIM40 @vigorlabs to get 40% OF\u2026", "createdAt": 1616778759000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Raphael is truly a moron... I bet his kids hate him. @tedcruz , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2757800798, "id": 1375495931097796608, "text": "Raphael is truly a moron... I bet his kids hate him. @tedcruz", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Writersfest: New podcast episode!

Kim Echlin in conversation w Rhonda Douglas is now live

Echlin's latest, Speak, Silence, is a poeti… , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 22643679, "id": 1375495931576119300, "text": "RT @Writersfest: New podcast episode!\n\nKim Echlin in conversation w Rhonda Douglas is now live\n\nEchlin's latest, Speak, Silence, is a poeti\u2026", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CTHUHTUN01: A Spring Revolution Hero, Ko Nay Lin Htwae, sacrificed his life for fellow comrades in the midst of constant firing. Genuin… , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1357394320635039744, "id": 1375495932318523392, "text": "RT @CTHUHTUN01: A Spring Revolution Hero, Ko Nay Lin Htwae, sacrificed his life for fellow comrades in the midst of constant firing. Genuin\u2026", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Get out those Picnic Baskets & BBQ’s 🙌🏻
#london #sun #spring #bbq #picnic #londonrocks
https://t.co/21QH9XaR7h˚c/ , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1375447389247582209, "id": 1375495932444348433, "text": "Get out those Picnic Baskets & BBQ\u2019s 🙌🏻\n#london #sun #spring #bbq #picnic #londonrocks\nhttps://t.co/21QH9XaR7h˚c/", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @RitaPanahi: Absolutely pathetic. Police watch on as protesters break the law but spring into action when a fed up motorist removes a ba… , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3775615034, "id": 1375495933421629441, "text": "RT @RitaPanahi: Absolutely pathetic. Police watch on as protesters break the law but spring into action when a fed up motorist removes a ba\u2026", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Great point 
@JosephScottMorg
 women due suffer the stigma/shame of reporting rape when they're inebriated or had been using drugs, feeling like it's their fault. , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 16614053, "id": 1375495933605990409, "text": "Great point \n@JosephScottMorg\n women due suffer the stigma/shame of reporting rape when they're inebriated or had been using drugs, feeling like it's their fault.", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SHUGAR_INFO: ／ 🌸
大好評、販売中
春の酒ガチャまつり🌸
＼　　　🌸

出会いの春に、いつもと違う新しいお酒をお届け。お得でワクワクお酒BOXです。
➤https://t.co/oGhPOh98lr

✨記念キャンペーン✨
1⃣ @SHUGAR_INFO… , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 174185569, "id": 1375495934189002752, "text": "RT @SHUGAR_INFO: ／ 🌸\n大好評、販売中\n春の酒ガチャまつり🌸\n＼　　　🌸\n\n出会いの春に、いつもと違う新しいお酒をお届け。お得でワクワクお酒BOXです。\n➤https://t.co/oGhPOh98lr\n\n✨記念キャンペーン✨\n1\u20E3 @SHUGAR_INFO\u2026", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text You know, there was a dead guy on the list of players invited to Indians spring training. Too bad they couldn't put him on the roster. He could still probably play third base better than Roger Dorn. https://t.co/VP4JLz9vWz , sending to Kafka topic twitter-topic
2021-03-26 22:43:58 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1371271740836429826, "id": 1375495933803307015, "text": "You know, there was a dead guy on the list of players invited to Indians spring training. Too bad they couldn't put him on the roster. He could still probably play third base better than Roger Dorn. https://t.co/VP4JLz9vWz", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:43:59 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text don’t forget to spring clean in all aspects of your life baby , sending to Kafka topic twitter-topic
2021-03-26 22:43:59 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1027209156, "id": 1375495935086620674, "text": "don\u2019t forget to spring clean in all aspects of your life baby", "createdAt": 1616778761000} to the topic = twitter-topic
2021-03-26 22:43:59 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ReinaGarciaTV: The Coffeyville Community College football team is returning to action for the first time since the 2019 season. 

@Red_… , sending to Kafka topic twitter-topic
2021-03-26 22:43:59 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4398174561, "id": 1375495936063926275, "text": "RT @ReinaGarciaTV: The Coffeyville Community College football team is returning to action for the first time since the 2019 season. \n\n@Red_\u2026", "createdAt": 1616778761000} to the topic = twitter-topic
2021-03-26 22:44:00 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Day 366. So 1 year plus on with garden tweets. Not quite sure what this tired evergreen actually is. Possibly choisya? It did not feature last year but on a huge shrub there are now a few pleasant clusters of white. Scheduled for a hard prune in June. #March2021 #garden #spring https://t.co/3ZszCrivYW , sending to Kafka topic twitter-topic
2021-03-26 22:44:00 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1879037797, "id": 1375495933182480386, "text": "Day 366. So 1 year plus on with garden tweets. Not quite sure what this tired evergreen actually is. Possibly choisya? It did not feature last year but on a huge shrub there are now a few pleasant clusters of white. Scheduled for a hard prune in June. #March2021 #garden #spring https://t.co/3ZszCrivYW", "createdAt": 1616778760000} to the topic = twitter-topic
2021-03-26 22:44:00 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @dgPickles Yeah, that is a bummer. I am with you on the weight loss program.  I hate the Covid 19#.  It's depressing.  But, Spring is here, so, walking more will be my 1st step to shedding it. Do you have an exercise plan? 🙂 , sending to Kafka topic twitter-topic
2021-03-26 22:44:00 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 140078045, "id": 1375495938844852238, "text": "@dgPickles Yeah, that is a bummer. I am with you on the weight loss program.  I hate the Covid 19#.  It's depressing.  But, Spring is here, so, walking more will be my 1st step to shedding it. Do you have an exercise plan? 🙂", "createdAt": 1616778761000} to the topic = twitter-topic
2021-03-26 22:44:00 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Flash sale: 50% off select envelopes! Bright colors just in time for your spring letters! https://t.co/WkQBQJRfI9
#envelopes #10envelopes #designerpapers #stationery https://t.co/q76PlHttOT , sending to Kafka topic twitter-topic
2021-03-26 22:44:00 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 97044230, "id": 1375495941281701894, "text": "Flash sale: 50% off select envelopes! Bright colors just in time for your spring letters! https://t.co/WkQBQJRfI9\n#envelopes #10envelopes #designerpapers #stationery https://t.co/q76PlHttOT", "createdAt": 1616778762000} to the topic = twitter-topic
2021-03-26 22:44:01 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @HammerNation19: Bobby Bradley hit .303 this Spring. 11 RBI led the team. Jake Bauers hit .200. This wasn't a real competition and this… , sending to Kafka topic twitter-topic
2021-03-26 22:44:01 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 339989496, "id": 1375495944041594884, "text": "RT @HammerNation19: Bobby Bradley hit .303 this Spring. 11 RBI led the team. Jake Bauers hit .200. This wasn't a real competition and this\u2026", "createdAt": 1616778763000} to the topic = twitter-topic
2021-03-26 22:44:01 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @AIRAAAOFFICIAL: It is only Farmer who Faithfully plants seed in the Spring, who reaps a harvest in the Autumn.
#आज_भारत_बंद_है https://… , sending to Kafka topic twitter-topic
2021-03-26 22:44:01 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 910459370550390785, "id": 1375495946931331075, "text": "RT @AIRAAAOFFICIAL: It is only Farmer who Faithfully plants seed in the Spring, who reaps a harvest in the Autumn.\n#आज_भारत_बंद_है https://\u2026", "createdAt": 1616778763000} to the topic = twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @EmilyFishbein11: Title: နွေဦးတော်လှန်ရေး (Spring Revolution)
Artist: Black Art
#WhatsHappeningInMyanmar https://t.co/wjJvFsuzhr , sending to Kafka topic twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1361727157874130947, "id": 1375495951310225408, "text": "RT @EmilyFishbein11: Title: နွေဦးတော်လှန်ရေး (Spring Revolution)\nArtist: Black Art\n#WhatsHappeningInMyanmar https://t.co/wjJvFsuzhr", "createdAt": 1616778764000} to the topic = twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @SchlegelRoadES: A rainbow over Schlegel- a reminder of how fortunate we are! Enjoy the Spring break everyone! https://t.co/NN1Ds874sa , sending to Kafka topic twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2479881697, "id": 1375495951931080704, "text": "RT @SchlegelRoadES: A rainbow over Schlegel- a reminder of how fortunate we are! Enjoy the Spring break everyone! https://t.co/NN1Ds874sa", "createdAt": 1616778765000} to the topic = twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @PRADAXBBY: spring wardrobes https://t.co/3rRAMGBLuO , sending to Kafka topic twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 4020406812, "id": 1375495953218682885, "text": "RT @PRADAXBBY: spring wardrobes https://t.co/3rRAMGBLuO", "createdAt": 1616778765000} to the topic = twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Frustrations grow among parents as districts continue to grapple with safely #reopeningschools. 

A parent from Los Gatos highlighted her concern that, "if they don’t figure it out in the spring, they’re not going to be back full time in the fall.” https://t.co/pbDytqYLwK , sending to Kafka topic twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 16815414, "id": 1375495955005407233, "text": "Frustrations grow among parents as districts continue to grapple with safely #reopeningschools. \n\nA parent from Los Gatos highlighted her concern that, \"if they don\u2019t figure it out in the spring, they\u2019re not going to be back full time in the fall.\u201D https://t.co/pbDytqYLwK", "createdAt": 1616778765000} to the topic = twitter-topic
2021-03-26 22:44:03 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Holi is the festival of colors and joy and is celebrated to welcome the spring season. The festival is full of life, enjoy the festival with full enthusiasm.@AmsterLabs  family wishes you a happy Holi. https://t.co/Fc7hsyz2fp , sending to Kafka topic twitter-topic
2021-03-26 22:44:04 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1309751513674395650, "id": 1375495955076640768, "text": "Holi is the festival of colors and joy and is celebrated to welcome the spring season. The festival is full of life, enjoy the festival with full enthusiasm.@AmsterLabs  family wishes you a happy Holi. https://t.co/Fc7hsyz2fp", "createdAt": 1616778765000} to the topic = twitter-topic
2021-03-26 22:44:04 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text A hot spring all to myself ... feels too good. #yurucamp https://t.co/KqE2TGEZ2t , sending to Kafka topic twitter-topic
2021-03-26 22:44:04 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2436335220, "id": 1375495957542998022, "text": "A hot spring all to myself ... feels too good. #yurucamp https://t.co/KqE2TGEZ2t", "createdAt": 1616778766000} to the topic = twitter-topic
2021-03-26 22:44:04 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @GigEm247: 2021 Texas A&M football spring preview: Kenyon Green finally moving outside to tackle

A&M lost both of its three-year offens… , sending to Kafka topic twitter-topic
2021-03-26 22:44:04 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 519702588, "id": 1375495958562234371, "text": "RT @GigEm247: 2021 Texas A&M football spring preview: Kenyon Green finally moving outside to tackle\n\nA&M lost both of its three-year offens\u2026", "createdAt": 1616778766000} to the topic = twitter-topic
2021-03-26 22:44:04 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Rhiannashop13: 2 pesos gcash !!!

PAKI PALIWANAG SAKIN YUNG  SPRING DAY

LIKE & RT , sending to Kafka topic twitter-topic
2021-03-26 22:44:04 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1240851561212862464, "id": 1375495959371640836, "text": "RT @Rhiannashop13: 2 pesos gcash !!!\n\nPAKI PALIWANAG SAKIN YUNG  SPRING DAY\n\nLIKE & RT", "createdAt": 1616778766000} to the topic = twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Good luck to all of our spring sport teams!!!! Go get that 🏆 , sending to Kafka topic twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3399578764, "id": 1375495961158516748, "text": "Good luck to all of our spring sport teams!!!! Go get that 🏆", "createdAt": 1616778767000} to the topic = twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CORSAIR: Not enough games in your backlog? 👀

We're giving away 3x packs of 20 games to celebrate the @GOGcom Spring Sale!!

To enter:… , sending to Kafka topic twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1108055363687985152, "id": 1375495961347244034, "text": "RT @CORSAIR: Not enough games in your backlog? 👀\n\nWe're giving away 3x packs of 20 games to celebrate the @GOGcom Spring Sale!!\n\nTo enter:\u2026", "createdAt": 1616778767000} to the topic = twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Nature fosters the natural curiosity and care for our natural world that we're born with. Let's encourage our children to spend time outdoors more this Spring and cultivate the habit of noticing our habitat. , sending to Kafka topic twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 735926371998945280, "id": 1375495961984765952, "text": "Nature fosters the natural curiosity and care for our natural world that we're born with. Let's encourage our children to spend time outdoors more this Spring and cultivate the habit of noticing our habitat.", "createdAt": 1616778767000} to the topic = twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text ART BEAT: Suwanee Art Center Exhibition Celebrates Spring | Entertainment https://t.co/IkFUXwhzE4 , sending to Kafka topic twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 891382950436229120, "id": 1375495962630701062, "text": "ART BEAT: Suwanee Art Center Exhibition Celebrates Spring | Entertainment https://t.co/IkFUXwhzE4", "createdAt": 1616778767000} to the topic = twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text On the nights the spring rain falls, I think of you, far away , sending to Kafka topic twitter-topic
2021-03-26 22:44:05 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1288658269465010176, "id": 1375495963817693192, "text": "On the nights the spring rain falls, I think of you, far away", "createdAt": 1616778767000} to the topic = twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @TimThomasTLP: Virginia Tech fires back at Blacksburg's claim that their local rules are not preventing a Spring Game from happening sta… , sending to Kafka topic twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3465528085, "id": 1375495964077793280, "text": "RT @TimThomasTLP: Virginia Tech fires back at Blacksburg's claim that their local rules are not preventing a Spring Game from happening sta\u2026", "createdAt": 1616778767000} to the topic = twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @soojahpah I hope so. At least it’s spring now , sending to Kafka topic twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2859159707, "id": 1375495964614623255, "text": "@soojahpah I hope so. At least it\u2019s spring now", "createdAt": 1616778768000} to the topic = twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @meongchongadri: Because there’s my favourite bside ever in it... Yes, Spring Fever, i’m talking about you 💓

but the choice is hard 😭[#… , sending to Kafka topic twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 784370498255937536, "id": 1375495965034082307, "text": "RT @meongchongadri: Because there\u2019s my favourite bside ever in it... Yes, Spring Fever, i\u2019m talking about you 💓\n\nbut the choice is hard 😭[#\u2026", "createdAt": 1616778768000} to the topic = twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Really nice day out, feels like the first real day of spring.  Might buy a grill and lie down on it to feel something. , sending to Kafka topic twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 416525849, "id": 1375495965776437254, "text": "Really nice day out, feels like the first real day of spring.  Might buy a grill and lie down on it to feel something.", "createdAt": 1616778768000} to the topic = twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @CORSAIR: Not enough games in your backlog? 👀

We're giving away 3x packs of 20 games to celebrate the @GOGcom Spring Sale!!

To enter:… , sending to Kafka topic twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 418405760, "id": 1375495966078423048, "text": "RT @CORSAIR: Not enough games in your backlog? 👀\n\nWe're giving away 3x packs of 20 games to celebrate the @GOGcom Spring Sale!!\n\nTo enter:\u2026", "createdAt": 1616778768000} to the topic = twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Students - Do you want to talk to a caring adult from school? There are counselors and social workers who want to help you, even during Spring Break!
SafeVoice is available 24 hours a day, every day at https://t.co/mi77LkPkEM or at 833-216-7233. , sending to Kafka topic twitter-topic
2021-03-26 22:44:06 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1044335038584651777, "id": 1375495967995174912, "text": "Students - Do you want to talk to a caring adult from school? There are counselors and social workers who want to help you, even during Spring Break!\nSafeVoice is available 24 hours a day, every day at https://t.co/mi77LkPkEM or at 833-216-7233.", "createdAt": 1616778768000} to the topic = twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text FEEL GOOD FRIDAY:  We have lots! 70 Hillburn Lane, North Barrington& 73 Bexley Ct, North Barrington (in Wynstone), 42 Highland Estates Rd in Spring Grove & 241 Otis in Barrington Hills. Take a look this weekend.
#lorirowethepro #love #coldwellbanker #homesweethome #forsalebylori https://t.co/n6yE3mGna2 , sending to Kafka topic twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 74565726, "id": 1375495968074915840, "text": "FEEL GOOD FRIDAY:  We have lots! 70 Hillburn Lane, North Barrington& 73 Bexley Ct, North Barrington (in Wynstone), 42 Highland Estates Rd in Spring Grove & 241 Otis in Barrington Hills. Take a look this weekend.\n#lorirowethepro #love #coldwellbanker #homesweethome #forsalebylori https://t.co/n6yE3mGna2", "createdAt": 1616778768000} to the topic = twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Rhiannashop13: 2 pesos gcash !!!

PAKI PALIWANAG SAKIN YUNG  SPRING DAY

LIKE & RT , sending to Kafka topic twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1375043986360967169, "id": 1375495969744166921, "text": "RT @Rhiannashop13: 2 pesos gcash !!!\n\nPAKI PALIWANAG SAKIN YUNG  SPRING DAY\n\nLIKE & RT", "createdAt": 1616778769000} to the topic = twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @DEARBGLITZ: — GLITZ SPRING — , sending to Kafka topic twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 2162303204, "id": 1375495970092314625, "text": "RT @DEARBGLITZ: \u2014 GLITZ SPRING \u2014", "createdAt": 1616778769000} to the topic = twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Took a drive in the (finally) spring weather. Distressed to see an area in northern Maryland filled with new DT signs. Sigh. , sending to Kafka topic twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 66267233, "id": 1375495971329744899, "text": "Took a drive in the (finally) spring weather. Distressed to see an area in northern Maryland filled with new DT signs. Sigh.", "createdAt": 1616778769000} to the topic = twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @odrotbohm: GraalVM native image compilation: the closest to Bitcoin mining a Java developer can get. , sending to Kafka topic twitter-topic
2021-03-26 22:44:07 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 56396508, "id": 1375495971736588297, "text": "RT @odrotbohm: GraalVM native image compilation: the closest to Bitcoin mining a Java developer can get.", "createdAt": 1616778769000} to the topic = twitter-topic
2021-03-26 22:44:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring Never Looked Better with @adrianachechik https://t.co/H5JOa5omyq , sending to Kafka topic twitter-topic
2021-03-26 22:44:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1257718285568704515, "id": 1375495972248289285, "text": "Spring Never Looked Better with @adrianachechik https://t.co/H5JOa5omyq", "createdAt": 1616778769000} to the topic = twitter-topic
2021-03-26 22:44:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @JJPMustangFB: Spring is coming #WIN #MustangNation https://t.co/VJKu6nXCi8 , sending to Kafka topic twitter-topic
2021-03-26 22:44:08 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 67337464, "id": 1375495974693527556, "text": "RT @JJPMustangFB: Spring is coming #WIN #MustangNation https://t.co/VJKu6nXCi8", "createdAt": 1616778770000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @SRKs_Aayush @itsGaurav_v 😭😂😭😂😭yaar m klse tl pe dekh rhi weather tweets 😭😂😭😂
Koi like summer kr rha
Koi winter
Koi spring😂
M chup chap baith ke dekh rhi🤧 , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1338850073078157312, "id": 1375495976790585346, "text": "@SRKs_Aayush @itsGaurav_v 😭😂😭😂😭yaar m klse tl pe dekh rhi weather tweets 😭😂😭😂\nKoi like summer kr rha\nKoi winter\nKoi spring😂\nM chup chap baith ke dekh rhi🤧", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text 2021 LEC Spring - Playoffs Round 1 - Fnatic vs SK Gaming https://t.co/H4Hgb8R1ts , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 148401693, "id": 1375495978212487168, "text": "2021 LEC Spring - Playoffs Round 1 - Fnatic vs SK Gaming https://t.co/H4Hgb8R1ts", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @kasuiwnl ur already on spring break? lucky mf , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1372065700534124546, "id": 1375495978946424833, "text": "@kasuiwnl ur already on spring break? lucky mf", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text when pigs fly;)

"The statement ... and supported the formation of “an independent, sovereign, unified, peaceful, democratic, and self-sufficient Afghanistan,” free of terrorism and drugs. It also called for the protection of the rights of women, children, minorities, and others. , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 21503578, "id": 1375495979143675916, "text": "when pigs fly;)\n\n\"The statement ... and supported the formation of \u201Can independent, sovereign, unified, peaceful, democratic, and self-sufficient Afghanistan,\u201D free of terrorism and drugs. It also called for the protection of the rights of women, children, minorities, and others.", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @crybabycrafts: 🌸 update available now! 🌸

✨ use code SPRING for 20% off! ✨

🌸 l!nk in bio! see below for more 🌸 https://t.co/xo9TCOK3mF , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1236742564184608769, "id": 1375495979588194318, "text": "RT @crybabycrafts: 🌸 update available now! 🌸\n\n✨ use code SPRING for 20% off! ✨\n\n🌸 l!nk in bio! see below for more 🌸 https://t.co/xo9TCOK3mF", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @madisoncsherlin: spring cleaning in FULL EFFECT in this household lemme tell you https://t.co/eQKSi2vs2i , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 79958449, "id": 1375495979693039618, "text": "RT @madisoncsherlin: spring cleaning in FULL EFFECT in this household lemme tell you https://t.co/eQKSi2vs2i", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @La_Pintora1: @mi_venecia  @samiii_78  @Nelidarojasb3  @marycastro54  @mabel_carrera  @mysticwolf14  @LiaIsti1  @ChristiWalling1   HAPPY… , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1351789300137005056, "id": 1375495979705769987, "text": "RT @La_Pintora1: @mi_venecia  @samiii_78  @Nelidarojasb3  @marycastro54  @mabel_carrera  @mysticwolf14  @LiaIsti1  @ChristiWalling1   HAPPY\u2026", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @ForestServiceNW: Sunbeams spread sparkles
Hillsides embrace growing warmth
Trees quiver for Spring https://t.co/FepFf6SFsZ , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 16783462, "id": 1375495979839938561, "text": "RT @ForestServiceNW: Sunbeams spread sparkles\nHillsides embrace growing warmth\nTrees quiver for Spring https://t.co/FepFf6SFsZ", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @JeffPassan: MLB's COVID testing results continue to skew in the right direction. This week, there were 4 positives among 13,978 tests.… , sending to Kafka topic twitter-topic
2021-03-26 22:44:09 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 751466839067103232, "id": 1375495979974029312, "text": "RT @JeffPassan: MLB's COVID testing results continue to skew in the right direction. This week, there were 4 positives among 13,978 tests.\u2026", "createdAt": 1616778771000} to the topic = twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @scottmerkin: White Sox are 18-for-20 in stolen bases this Spring Training. Sure, they have great home run power throughout the lineup,… , sending to Kafka topic twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 926975564984061952, "id": 1375495982721417216, "text": "RT @scottmerkin: White Sox are 18-for-20 in stolen bases this Spring Training. Sure, they have great home run power throughout the lineup,\u2026", "createdAt": 1616778772000} to the topic = twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Ooma: Spring into savings! Shop now and get up to 30% off business phones. , sending to Kafka topic twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 251716225, "id": 1375495982859886601, "text": "RT @Ooma: Spring into savings! Shop now and get up to 30% off business phones.", "createdAt": 1616778772000} to the topic = twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text "..until things happen, they haven't happened. And often things aren't what they seem." - Oshima, Kafka on the Shore , sending to Kafka topic twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1231601327068737536, "id": 1375495983597953024, "text": "\"..until things happen, they haven't happened. And often things aren't what they seem.\" - Oshima, Kafka on the Shore", "createdAt": 1616778772000} to the topic = twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring is here!❤️🌸🌺
#tangodress #tangostyle #tango #argentinetango #springdresses #pinkpoppies #lovedance #dancingisfun #lovetango #tangogoddess https://t.co/AcOUVPksiB , sending to Kafka topic twitter-topic
2021-03-26 22:44:10 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1861161025, "id": 1375495983891615744, "text": "Spring is here!❤️🌸🌺\n#tangodress #tangostyle #tango #argentinetango #springdresses #pinkpoppies #lovedance #dancingisfun #lovetango #tangogoddess https://t.co/AcOUVPksiB", "createdAt": 1616778772000} to the topic = twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @thegroovycrew: ASCENDING TO MARS” *࿔*:･ﾟ
winter/spring collection 2021
available fri 3/26/2021 @ 11AM PST
https://t.co/C5iMCReSaw https… , sending to Kafka topic twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 3138242629, "id": 1375495985724588037, "text": "RT @thegroovycrew: ASCENDING TO MARS\u201D *࿔*:･ﾟ\nwinter/spring collection 2021\navailable fri 3/26/2021 @ 11AM PST\nhttps://t.co/C5iMCReSaw https\u2026", "createdAt": 1616778773000} to the topic = twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @Rhiannashop13: 2 pesos gcash !!!

PAKI PALIWANAG SAKIN YUNG  SPRING DAY

LIKE & RT , sending to Kafka topic twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1302632571264663553, "id": 1375495988597551104, "text": "RT @Rhiannashop13: 2 pesos gcash !!!\n\nPAKI PALIWANAG SAKIN YUNG  SPRING DAY\n\nLIKE & RT", "createdAt": 1616778773000} to the topic = twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text @piece_live I was like "wait, but spring 2021 is now right? There's even no casting news anymore, but comments said spring in Capetown is at the end of the year. if they start filming like at the end of 2021, it's even possible the show will come out in 2023...Dude...that's too long to wait , sending to Kafka topic twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 916150298913239040, "id": 1375495988568264708, "text": "@piece_live I was like \"wait, but spring 2021 is now right? There's even no casting news anymore, but comments said spring in Capetown is at the end of the year. if they start filming like at the end of 2021, it's even possible the show will come out in 2023...Dude...that's too long to wait", "createdAt": 1616778773000} to the topic = twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text INTERNET DARK ERA
#WhatsHappeningInMyanmar 
#Mar26Coup , sending to Kafka topic twitter-topic
2021-03-26 22:44:11 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1209054817529712641, "id": 1375495989071597570, "text": "INTERNET DARK ERA\n#WhatsHappeningInMyanmar \n#Mar26Coup", "createdAt": 1616778773000} to the topic = twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Spring into the perfect backyard with a custom pool. There's no better time to get started than now. https://t.co/n3eMMBbbyb https://t.co/HvABfOW8jo , sending to Kafka topic twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1220800244188876800, "id": 1375495988413132801, "text": "Spring into the perfect backyard with a custom pool. There's no better time to get started than now. https://t.co/n3eMMBbbyb https://t.co/HvABfOW8jo", "createdAt": 1616778773000} to the topic = twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @KarmineCorp: MESDAMES ET MESSIEURS,

LA KARMINE CORP EST SACRÉE CHAMPIONNE DU SPRING SPLIT DE #LFL 2021 👏🏻

#KCORP #BLUEWALL https://t.… , sending to Kafka topic twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1077345501572460545, "id": 1375495989428113408, "text": "RT @KarmineCorp: MESDAMES ET MESSIEURS,\n\nLA KARMINE CORP EST SACRÉE CHAMPIONNE DU SPRING SPLIT DE #LFL 2021 👏🏻\n\n#KCORP #BLUEWALL https://t.\u2026", "createdAt": 1616778774000} to the topic = twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @BeingSalmanKhan: Double good news hai aapke liye. Being Human Clothing ki Spring Summer’21 Collection is here. Aur, Chandigarh & Srinag… , sending to Kafka topic twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1272908342034345986, "id": 1375495990665478145, "text": "RT @BeingSalmanKhan: Double good news hai aapke liye. Being Human Clothing ki Spring Summer\u201921 Collection is here. Aur, Chandigarh & Srinag\u2026", "createdAt": 1616778774000} to the topic = twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text RT @mollysbloomers: Ready for spring 🌻 https://t.co/ZdnmAhmIno , sending to Kafka topic twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 1246878135997652992, "id": 1375495990778720260, "text": "RT @mollysbloomers: Ready for spring 🌻 https://t.co/ZdnmAhmIno", "createdAt": 1616778774000} to the topic = twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.t.l.TwitterKafkaStatusListener - Twitter Status with Text Thug not dropping til end of spring / beginning of summer , sending to Kafka topic twitter-topic
2021-03-26 22:44:12 [Twitter4J Async Dispatcher[0]] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Sending message ={"userId": 289048821, "id": 1375495990774497282, "text": "Thug not dropping til end of spring / beginning of summer", "createdAt": 1616778774000} to the topic = twitter-topic
2021-03-26 22:44:12 [SpringContextShutdownHook] INFO  c.t.t.runner.impl.StreamRunnerImpl - TwitterStream is not null, closing it
2021-03-26 22:44:13 [SpringContextShutdownHook] INFO  c.t.k.p.s.impl.TwitterKafkaProducer - Closing kafka Template
2021-03-26 22:44:13 [SpringContextShutdownHook] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
